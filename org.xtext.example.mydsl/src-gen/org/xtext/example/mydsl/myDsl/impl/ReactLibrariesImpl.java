/**
 * generated by Xtext 2.18.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.ReactLibraries;
import org.xtext.example.mydsl.myDsl.ReactLibrary;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>React Libraries</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ReactLibrariesImpl#getReactlibraries <em>Reactlibraries</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ReactLibrariesImpl extends MinimalEObjectImpl.Container implements ReactLibraries
{
  /**
   * The cached value of the '{@link #getReactlibraries() <em>Reactlibraries</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReactlibraries()
   * @generated
   * @ordered
   */
  protected EList<ReactLibrary> reactlibraries;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ReactLibrariesImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.REACT_LIBRARIES;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ReactLibrary> getReactlibraries()
  {
    if (reactlibraries == null)
    {
      reactlibraries = new EObjectContainmentEList<ReactLibrary>(ReactLibrary.class, this, MyDslPackage.REACT_LIBRARIES__REACTLIBRARIES);
    }
    return reactlibraries;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.REACT_LIBRARIES__REACTLIBRARIES:
        return ((InternalEList<?>)getReactlibraries()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.REACT_LIBRARIES__REACTLIBRARIES:
        return getReactlibraries();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.REACT_LIBRARIES__REACTLIBRARIES:
        getReactlibraries().clear();
        getReactlibraries().addAll((Collection<? extends ReactLibrary>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.REACT_LIBRARIES__REACTLIBRARIES:
        getReactlibraries().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.REACT_LIBRARIES__REACTLIBRARIES:
        return reactlibraries != null && !reactlibraries.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ReactLibrariesImpl
