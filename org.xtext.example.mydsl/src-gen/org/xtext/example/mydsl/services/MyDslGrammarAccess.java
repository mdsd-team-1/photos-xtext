/*
 * generated by Xtext 2.18.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsDomainParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsArchitectureParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Assignment cElementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElementsTechnologyParserRuleCall_5_0 = (RuleCall)cElementsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////System
		//Model:
		//	'System' ':' '{' elements+=Domain elements+=Architecture elements+=Technology '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'System' ':' '{' elements+=Domain elements+=Architecture elements+=Technology '}'
		public Group getGroup() { return cGroup; }
		
		//'System'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//elements+=Domain
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//Domain
		public RuleCall getElementsDomainParserRuleCall_3_0() { return cElementsDomainParserRuleCall_3_0; }
		
		//elements+=Architecture
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//Architecture
		public RuleCall getElementsArchitectureParserRuleCall_4_0() { return cElementsArchitectureParserRuleCall_4_0; }
		
		//elements+=Technology
		public Assignment getElementsAssignment_5() { return cElementsAssignment_5; }
		
		//Technology
		public RuleCall getElementsTechnologyParserRuleCall_5_0() { return cElementsTechnologyParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class DomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Domain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDomainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsEntityParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Assignment cElementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElementsFunctionalityParserRuleCall_5_0 = (RuleCall)cElementsAssignment_5.eContents().get(0);
		private final Assignment cElementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElementsDomainConnectionParserRuleCall_6_0 = (RuleCall)cElementsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// Domain
		//Domain:
		//	'Domain' name=ID ':' '{' elements+=Entity elements+=Functionality elements+=DomainConnection '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Domain' name=ID ':' '{' elements+=Entity elements+=Functionality elements+=DomainConnection '}'
		public Group getGroup() { return cGroup; }
		
		//'Domain'
		public Keyword getDomainKeyword_0() { return cDomainKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//elements+=Entity
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//Entity
		public RuleCall getElementsEntityParserRuleCall_4_0() { return cElementsEntityParserRuleCall_4_0; }
		
		//elements+=Functionality
		public Assignment getElementsAssignment_5() { return cElementsAssignment_5; }
		
		//Functionality
		public RuleCall getElementsFunctionalityParserRuleCall_5_0() { return cElementsFunctionalityParserRuleCall_5_0; }
		
		//elements+=DomainConnection
		public Assignment getElementsAssignment_6() { return cElementsAssignment_6; }
		
		//DomainConnection
		public RuleCall getElementsDomainConnectionParserRuleCall_6_0() { return cElementsDomainConnectionParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntitiesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsEntitiesParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// Domain - Entities
		//Entity:
		//	'Entities' ':' '{' elements+=Entities '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Entities' ':' '{' elements+=Entities '}'
		public Group getGroup() { return cGroup; }
		
		//'Entities'
		public Keyword getEntitiesKeyword_0() { return cEntitiesKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//elements+=Entities
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//Entities
		public RuleCall getElementsEntitiesParserRuleCall_3_0() { return cElementsEntitiesParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EntitiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Entities");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsPhotoParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsAlbumParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsUserDomainParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		
		//Entities:
		//	elements+=Photo+ elements+=Album+ elements+=UserDomain+;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Photo+ elements+=Album+ elements+=UserDomain+
		public Group getGroup() { return cGroup; }
		
		//elements+=Photo+
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//Photo
		public RuleCall getElementsPhotoParserRuleCall_0_0() { return cElementsPhotoParserRuleCall_0_0; }
		
		//elements+=Album+
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//Album
		public RuleCall getElementsAlbumParserRuleCall_1_0() { return cElementsAlbumParserRuleCall_1_0; }
		
		//elements+=UserDomain+
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//UserDomain
		public RuleCall getElementsUserDomainParserRuleCall_2_0() { return cElementsUserDomainParserRuleCall_2_0; }
	}
	public class PhotoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Photo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPhotoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Photo:
		//	'Photo' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Photo' name=ID
		public Group getGroup() { return cGroup; }
		
		//'Photo'
		public Keyword getPhotoKeyword_0() { return cPhotoKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class AlbumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Album");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlbumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Album:
		//	'Album' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Album' name=ID
		public Group getGroup() { return cGroup; }
		
		//'Album'
		public Keyword getAlbumKeyword_0() { return cAlbumKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class UserDomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.UserDomain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUserDomainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//UserDomain:
		//	'UserDomain' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'UserDomain' name=ID
		public Group getGroup() { return cGroup; }
		
		//'UserDomain'
		public Keyword getUserDomainKeyword_0() { return cUserDomainKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class FunctionalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Functionality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionalitiesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsFunctionalitiesParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// Domain - Functionalities
		//Functionality:
		//	'Functionalities' ':' '{' elements+=Functionalities '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Functionalities' ':' '{' elements+=Functionalities '}'
		public Group getGroup() { return cGroup; }
		
		//'Functionalities'
		public Keyword getFunctionalitiesKeyword_0() { return cFunctionalitiesKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//elements+=Functionalities
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//Functionalities
		public RuleCall getElementsFunctionalitiesParserRuleCall_3_0() { return cElementsFunctionalitiesParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class FunctionalitiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Functionalities");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionsProfileManagementParserRuleCall_0_0 = (RuleCall)cFunctionsAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsAppAccessParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Assignment cItemsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cItemsAlbumManagementParserRuleCall_2_0 = (RuleCall)cItemsAssignment_2.eContents().get(0);
		private final Assignment cResourcesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cResourcesPhotoActionsParserRuleCall_3_0 = (RuleCall)cResourcesAssignment_3.eContents().get(0);
		private final Assignment cAditionalsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAditionalsLandingActionsParserRuleCall_4_0 = (RuleCall)cAditionalsAssignment_4.eContents().get(0);
		
		//Functionalities:
		//	functions+=ProfileManagement
		//	elements+=AppAccess
		//	items+=AlbumManagement
		//	resources+=PhotoActions
		//	aditionals+=LandingActions;
		@Override public ParserRule getRule() { return rule; }
		
		//functions+=ProfileManagement elements+=AppAccess items+=AlbumManagement resources+=PhotoActions
		//aditionals+=LandingActions
		public Group getGroup() { return cGroup; }
		
		//functions+=ProfileManagement
		public Assignment getFunctionsAssignment_0() { return cFunctionsAssignment_0; }
		
		//ProfileManagement
		public RuleCall getFunctionsProfileManagementParserRuleCall_0_0() { return cFunctionsProfileManagementParserRuleCall_0_0; }
		
		//elements+=AppAccess
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//AppAccess
		public RuleCall getElementsAppAccessParserRuleCall_1_0() { return cElementsAppAccessParserRuleCall_1_0; }
		
		//items+=AlbumManagement
		public Assignment getItemsAssignment_2() { return cItemsAssignment_2; }
		
		//AlbumManagement
		public RuleCall getItemsAlbumManagementParserRuleCall_2_0() { return cItemsAlbumManagementParserRuleCall_2_0; }
		
		//resources+=PhotoActions
		public Assignment getResourcesAssignment_3() { return cResourcesAssignment_3; }
		
		//PhotoActions
		public RuleCall getResourcesPhotoActionsParserRuleCall_3_0() { return cResourcesPhotoActionsParserRuleCall_3_0; }
		
		//aditionals+=LandingActions
		public Assignment getAditionalsAssignment_4() { return cAditionalsAssignment_4; }
		
		//LandingActions
		public RuleCall getAditionalsLandingActionsParserRuleCall_4_0() { return cAditionalsLandingActionsParserRuleCall_4_0; }
	}
	public class ProfileManagementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ProfileManagement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProfileManagementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cItemsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cItemsProfileManagementFunctionsParserRuleCall_2_0 = (RuleCall)cItemsAssignment_2.eContents().get(0);
		
		//ProfileManagement:
		//	'ProfileManagement' ':' items+=ProfileManagementFunctions;
		@Override public ParserRule getRule() { return rule; }
		
		//'ProfileManagement' ':' items+=ProfileManagementFunctions
		public Group getGroup() { return cGroup; }
		
		//'ProfileManagement'
		public Keyword getProfileManagementKeyword_0() { return cProfileManagementKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//items+=ProfileManagementFunctions
		public Assignment getItemsAssignment_2() { return cItemsAssignment_2; }
		
		//ProfileManagementFunctions
		public RuleCall getItemsProfileManagementFunctionsParserRuleCall_2_0() { return cItemsProfileManagementFunctionsParserRuleCall_2_0; }
	}
	public class ProfileManagementFunctionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ProfileManagementFunctions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cViewProfilePhotoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEditProfileInfoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//ProfileManagementFunctions:
		//	'ViewProfilePhoto' name=ID 'EditProfileInfo' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'ViewProfilePhoto' name=ID 'EditProfileInfo' name=ID
		public Group getGroup() { return cGroup; }
		
		//'ViewProfilePhoto'
		public Keyword getViewProfilePhotoKeyword_0() { return cViewProfilePhotoKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'EditProfileInfo'
		public Keyword getEditProfileInfoKeyword_2() { return cEditProfileInfoKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}
	public class AppAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.AppAccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAppAccessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cItemsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cItemsAppAccessFunctionsParserRuleCall_2_0 = (RuleCall)cItemsAssignment_2.eContents().get(0);
		
		//AppAccess:
		//	'AppAccess' ':' items+=AppAccessFunctions;
		@Override public ParserRule getRule() { return rule; }
		
		//'AppAccess' ':' items+=AppAccessFunctions
		public Group getGroup() { return cGroup; }
		
		//'AppAccess'
		public Keyword getAppAccessKeyword_0() { return cAppAccessKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//items+=AppAccessFunctions
		public Assignment getItemsAssignment_2() { return cItemsAssignment_2; }
		
		//AppAccessFunctions
		public RuleCall getItemsAppAccessFunctionsParserRuleCall_2_0() { return cItemsAppAccessFunctionsParserRuleCall_2_0; }
	}
	public class AppAccessFunctionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.AppAccessFunctions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoginKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRegisterKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//AppAccessFunctions:
		//	'Login' name=ID 'Register' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Login' name=ID 'Register' name=ID
		public Group getGroup() { return cGroup; }
		
		//'Login'
		public Keyword getLoginKeyword_0() { return cLoginKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'Register'
		public Keyword getRegisterKeyword_2() { return cRegisterKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}
	public class AlbumManagementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.AlbumManagement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlbumManagementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cItemsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cItemsAlbumManagementFunctionsParserRuleCall_2_0 = (RuleCall)cItemsAssignment_2.eContents().get(0);
		
		//AlbumManagement:
		//	'AlbumManagement' ':' items+=AlbumManagementFunctions;
		@Override public ParserRule getRule() { return rule; }
		
		//'AlbumManagement' ':' items+=AlbumManagementFunctions
		public Group getGroup() { return cGroup; }
		
		//'AlbumManagement'
		public Keyword getAlbumManagementKeyword_0() { return cAlbumManagementKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//items+=AlbumManagementFunctions
		public Assignment getItemsAssignment_2() { return cItemsAssignment_2; }
		
		//AlbumManagementFunctions
		public RuleCall getItemsAlbumManagementFunctionsParserRuleCall_2_0() { return cItemsAlbumManagementFunctionsParserRuleCall_2_0; }
	}
	public class AlbumManagementFunctionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.AlbumManagementFunctions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateAlbumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSelectAlbumKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//AlbumManagementFunctions:
		//	'CreateAlbum' name=ID 'SelectAlbum' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'CreateAlbum' name=ID 'SelectAlbum' name=ID
		public Group getGroup() { return cGroup; }
		
		//'CreateAlbum'
		public Keyword getCreateAlbumKeyword_0() { return cCreateAlbumKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'SelectAlbum'
		public Keyword getSelectAlbumKeyword_2() { return cSelectAlbumKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}
	public class PhotoActionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PhotoActions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPhotoActionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cItemsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cItemsPhotoActionsFunctionsParserRuleCall_2_0 = (RuleCall)cItemsAssignment_2.eContents().get(0);
		
		//PhotoActions:
		//	'PhotoActions' ':' items+=PhotoActionsFunctions;
		@Override public ParserRule getRule() { return rule; }
		
		//'PhotoActions' ':' items+=PhotoActionsFunctions
		public Group getGroup() { return cGroup; }
		
		//'PhotoActions'
		public Keyword getPhotoActionsKeyword_0() { return cPhotoActionsKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//items+=PhotoActionsFunctions
		public Assignment getItemsAssignment_2() { return cItemsAssignment_2; }
		
		//PhotoActionsFunctions
		public RuleCall getItemsPhotoActionsFunctionsParserRuleCall_2_0() { return cItemsPhotoActionsFunctionsParserRuleCall_2_0; }
	}
	public class PhotoActionsFunctionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PhotoActionsFunctions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cViewAllPhotosKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cViewExtendedPhotoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLoadPhotoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		
		//PhotoActionsFunctions:
		//	'ViewAllPhotos' name=ID 'ViewExtendedPhoto' name=ID 'LoadPhoto' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'ViewAllPhotos' name=ID 'ViewExtendedPhoto' name=ID 'LoadPhoto' name=ID
		public Group getGroup() { return cGroup; }
		
		//'ViewAllPhotos'
		public Keyword getViewAllPhotosKeyword_0() { return cViewAllPhotosKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'ViewExtendedPhoto'
		public Keyword getViewExtendedPhotoKeyword_2() { return cViewExtendedPhotoKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'LoadPhoto'
		public Keyword getLoadPhotoKeyword_4() { return cLoadPhotoKeyword_4; }
		
		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }
	}
	public class LandingActionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LandingActions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLandingActionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cItemsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cItemsLandingFunctionsParserRuleCall_2_0 = (RuleCall)cItemsAssignment_2.eContents().get(0);
		
		//LandingActions:
		//	'LandingActions' ':' items+=LandingFunctions;
		@Override public ParserRule getRule() { return rule; }
		
		//'LandingActions' ':' items+=LandingFunctions
		public Group getGroup() { return cGroup; }
		
		//'LandingActions'
		public Keyword getLandingActionsKeyword_0() { return cLandingActionsKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//items+=LandingFunctions
		public Assignment getItemsAssignment_2() { return cItemsAssignment_2; }
		
		//LandingFunctions
		public RuleCall getItemsLandingFunctionsParserRuleCall_2_0() { return cItemsLandingFunctionsParserRuleCall_2_0; }
	}
	public class LandingFunctionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LandingFunctions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cViewCarouselKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cPassPhotoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//LandingFunctions:
		//	'ViewCarousel' name=ID 'PassPhoto' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'ViewCarousel' name=ID 'PassPhoto' name=ID
		public Group getGroup() { return cGroup; }
		
		//'ViewCarousel'
		public Keyword getViewCarouselKeyword_0() { return cViewCarouselKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'PassPhoto'
		public Keyword getPassPhotoKeyword_2() { return cPassPhotoKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}
	public class DomainConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DomainConnection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDomainRelationsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsDomainRelationsParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////Domain - Relations
		//DomainConnection:
		//	'DomainRelations' ':' '{' elements+=DomainRelations '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'DomainRelations' ':' '{' elements+=DomainRelations '}'
		public Group getGroup() { return cGroup; }
		
		//'DomainRelations'
		public Keyword getDomainRelationsKeyword_0() { return cDomainRelationsKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//elements+=DomainRelations
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//DomainRelations
		public RuleCall getElementsDomainRelationsParserRuleCall_3_0() { return cElementsDomainRelationsParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class DomainRelationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DomainRelations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsUserDomainParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsFunctionalitiesParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cElementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElementsAlbumParserRuleCall_6_0 = (RuleCall)cElementsAssignment_6.eContents().get(0);
		private final Assignment cNameAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cNameIDTerminalRuleCall_7_0 = (RuleCall)cNameAssignment_7.eContents().get(0);
		private final Keyword cColonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cElementsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cElementsAlbumManagementFunctionsParserRuleCall_10_0 = (RuleCall)cElementsAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cElementsAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cElementsPhotoParserRuleCall_12_0 = (RuleCall)cElementsAssignment_12.eContents().get(0);
		private final Assignment cNameAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cNameIDTerminalRuleCall_13_0 = (RuleCall)cNameAssignment_13.eContents().get(0);
		private final Keyword cColonKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cLeftCurlyBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Assignment cElementsAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final RuleCall cElementsPhotoActionsFunctionsParserRuleCall_16_0 = (RuleCall)cElementsAssignment_16.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Assignment cElementsAssignment_18 = (Assignment)cGroup.eContents().get(18);
		private final RuleCall cElementsPhotoActionsParserRuleCall_18_0 = (RuleCall)cElementsAssignment_18.eContents().get(0);
		private final Assignment cNameAssignment_19 = (Assignment)cGroup.eContents().get(19);
		private final RuleCall cNameIDTerminalRuleCall_19_0 = (RuleCall)cNameAssignment_19.eContents().get(0);
		private final Keyword cColonKeyword_20 = (Keyword)cGroup.eContents().get(20);
		private final Keyword cLeftCurlyBracketKeyword_21 = (Keyword)cGroup.eContents().get(21);
		private final Assignment cElementsAssignment_22 = (Assignment)cGroup.eContents().get(22);
		private final RuleCall cElementsAlbumManagementParserRuleCall_22_0 = (RuleCall)cElementsAssignment_22.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_23 = (Keyword)cGroup.eContents().get(23);
		
		//DomainRelations:
		//	elements+=UserDomain name=ID ':' '{' elements+=Functionalities '}'
		//	elements+=Album name=ID ':' '{' elements+=AlbumManagementFunctions '}'
		//	elements+=Photo name=ID ':' '{' elements+=PhotoActionsFunctions '}'
		//	elements+=PhotoActions name=ID ':' '{' elements+=AlbumManagement '}';
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=UserDomain name=ID ':' '{' elements+=Functionalities '}' elements+=Album name=ID ':' '{'
		//elements+=AlbumManagementFunctions '}' elements+=Photo name=ID ':' '{' elements+=PhotoActionsFunctions '}'
		//elements+=PhotoActions name=ID ':' '{' elements+=AlbumManagement '}'
		public Group getGroup() { return cGroup; }
		
		//elements+=UserDomain
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//UserDomain
		public RuleCall getElementsUserDomainParserRuleCall_0_0() { return cElementsUserDomainParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//elements+=Functionalities
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//Functionalities
		public RuleCall getElementsFunctionalitiesParserRuleCall_4_0() { return cElementsFunctionalitiesParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//elements+=Album
		public Assignment getElementsAssignment_6() { return cElementsAssignment_6; }
		
		//Album
		public RuleCall getElementsAlbumParserRuleCall_6_0() { return cElementsAlbumParserRuleCall_6_0; }
		
		//name=ID
		public Assignment getNameAssignment_7() { return cNameAssignment_7; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_7_0() { return cNameIDTerminalRuleCall_7_0; }
		
		//':'
		public Keyword getColonKeyword_8() { return cColonKeyword_8; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_9() { return cLeftCurlyBracketKeyword_9; }
		
		//elements+=AlbumManagementFunctions
		public Assignment getElementsAssignment_10() { return cElementsAssignment_10; }
		
		//AlbumManagementFunctions
		public RuleCall getElementsAlbumManagementFunctionsParserRuleCall_10_0() { return cElementsAlbumManagementFunctionsParserRuleCall_10_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
		
		//elements+=Photo
		public Assignment getElementsAssignment_12() { return cElementsAssignment_12; }
		
		//Photo
		public RuleCall getElementsPhotoParserRuleCall_12_0() { return cElementsPhotoParserRuleCall_12_0; }
		
		//name=ID
		public Assignment getNameAssignment_13() { return cNameAssignment_13; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_13_0() { return cNameIDTerminalRuleCall_13_0; }
		
		//':'
		public Keyword getColonKeyword_14() { return cColonKeyword_14; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_15() { return cLeftCurlyBracketKeyword_15; }
		
		//elements+=PhotoActionsFunctions
		public Assignment getElementsAssignment_16() { return cElementsAssignment_16; }
		
		//PhotoActionsFunctions
		public RuleCall getElementsPhotoActionsFunctionsParserRuleCall_16_0() { return cElementsPhotoActionsFunctionsParserRuleCall_16_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_17() { return cRightCurlyBracketKeyword_17; }
		
		//elements+=PhotoActions
		public Assignment getElementsAssignment_18() { return cElementsAssignment_18; }
		
		//PhotoActions
		public RuleCall getElementsPhotoActionsParserRuleCall_18_0() { return cElementsPhotoActionsParserRuleCall_18_0; }
		
		//name=ID
		public Assignment getNameAssignment_19() { return cNameAssignment_19; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_19_0() { return cNameIDTerminalRuleCall_19_0; }
		
		//':'
		public Keyword getColonKeyword_20() { return cColonKeyword_20; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_21() { return cLeftCurlyBracketKeyword_21; }
		
		//elements+=AlbumManagement
		public Assignment getElementsAssignment_22() { return cElementsAssignment_22; }
		
		//AlbumManagement
		public RuleCall getElementsAlbumManagementParserRuleCall_22_0() { return cElementsAlbumManagementParserRuleCall_22_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_23() { return cRightCurlyBracketKeyword_23; }
	}
	public class ArchitectureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Architecture");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArchitectureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////Architecture
		//Architecture:
		//	'Architecture:' '{' name=ID '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Architecture:' '{' name=ID '}'
		public Group getGroup() { return cGroup; }
		
		//'Architecture:'
		public Keyword getArchitectureKeyword_0() { return cArchitectureKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class TechnologyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Technology");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTechnologyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsTechnologiesParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////Technology
		//Technology:
		//	'Technology' name=ID ':' '{' elements+=Technologies '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Technology' name=ID ':' '{' elements+=Technologies '}'
		public Group getGroup() { return cGroup; }
		
		//'Technology'
		public Keyword getTechnologyKeyword_0() { return cTechnologyKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//elements+=Technologies
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//Technologies
		public RuleCall getElementsTechnologiesParserRuleCall_4_0() { return cElementsTechnologiesParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class TechnologiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Technologies");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFactorsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFactorsSpringParserRuleCall_0_0 = (RuleCall)cFactorsAssignment_0.eContents().get(0);
		private final Assignment cFactorsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFactorsReactParserRuleCall_1_0 = (RuleCall)cFactorsAssignment_1.eContents().get(0);
		private final Assignment cFactorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFactorsPostgreSQLParserRuleCall_2_0 = (RuleCall)cFactorsAssignment_2.eContents().get(0);
		private final Assignment cFactorsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFactorsAmazonWebServicesParserRuleCall_3_0 = (RuleCall)cFactorsAssignment_3.eContents().get(0);
		
		//Technologies:
		//	factors+=Spring factors+=React factors+=PostgreSQL factors+=AmazonWebServices;
		@Override public ParserRule getRule() { return rule; }
		
		//factors+=Spring factors+=React factors+=PostgreSQL factors+=AmazonWebServices
		public Group getGroup() { return cGroup; }
		
		//factors+=Spring
		public Assignment getFactorsAssignment_0() { return cFactorsAssignment_0; }
		
		//Spring
		public RuleCall getFactorsSpringParserRuleCall_0_0() { return cFactorsSpringParserRuleCall_0_0; }
		
		//factors+=React
		public Assignment getFactorsAssignment_1() { return cFactorsAssignment_1; }
		
		//React
		public RuleCall getFactorsReactParserRuleCall_1_0() { return cFactorsReactParserRuleCall_1_0; }
		
		//factors+=PostgreSQL
		public Assignment getFactorsAssignment_2() { return cFactorsAssignment_2; }
		
		//PostgreSQL
		public RuleCall getFactorsPostgreSQLParserRuleCall_2_0() { return cFactorsPostgreSQLParserRuleCall_2_0; }
		
		//factors+=AmazonWebServices
		public Assignment getFactorsAssignment_3() { return cFactorsAssignment_3; }
		
		//AmazonWebServices
		public RuleCall getFactorsAmazonWebServicesParserRuleCall_3_0() { return cFactorsAmazonWebServicesParserRuleCall_3_0; }
	}
	public class ReactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.React");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReactKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cReactsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cReactsReactModulesParserRuleCall_4_0 = (RuleCall)cReactsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//React:
		//	'React' name=ID ':' '{' reacts+=ReactModules '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'React' name=ID ':' '{' reacts+=ReactModules '}'
		public Group getGroup() { return cGroup; }
		
		//'React'
		public Keyword getReactKeyword_0() { return cReactKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//reacts+=ReactModules
		public Assignment getReactsAssignment_4() { return cReactsAssignment_4; }
		
		//ReactModules
		public RuleCall getReactsReactModulesParserRuleCall_4_0() { return cReactsReactModulesParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ReactModulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReactModules");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReactModulesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cReactmodulesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cReactmodulesReactSubModulesParserRuleCall_3_0 = (RuleCall)cReactmodulesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ReactModules:
		//	'ReactModules' ':' '{' reactmodules+=ReactSubModules '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ReactModules' ':' '{' reactmodules+=ReactSubModules '}'
		public Group getGroup() { return cGroup; }
		
		//'ReactModules'
		public Keyword getReactModulesKeyword_0() { return cReactModulesKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//reactmodules+=ReactSubModules
		public Assignment getReactmodulesAssignment_3() { return cReactmodulesAssignment_3; }
		
		//ReactSubModules
		public RuleCall getReactmodulesReactSubModulesParserRuleCall_3_0() { return cReactmodulesReactSubModulesParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ReactSubModulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReactSubModules");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReactmodulesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReactmodulesReactConfigurationParserRuleCall_0_0 = (RuleCall)cReactmodulesAssignment_0.eContents().get(0);
		private final Assignment cReactmodulesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReactmodulesReactComponentsParserRuleCall_1_0 = (RuleCall)cReactmodulesAssignment_1.eContents().get(0);
		private final Assignment cReactmodulesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReactmodulesReactActionsParserRuleCall_2_0 = (RuleCall)cReactmodulesAssignment_2.eContents().get(0);
		private final Assignment cReactmodulesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cReactmodulesReactLibrariesParserRuleCall_3_0 = (RuleCall)cReactmodulesAssignment_3.eContents().get(0);
		private final Assignment cReactmodulesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cReactmodulesReactInfoParserRuleCall_4_0 = (RuleCall)cReactmodulesAssignment_4.eContents().get(0);
		
		//ReactSubModules:
		//	reactmodules+=ReactConfiguration
		//	reactmodules+=ReactComponents
		//	reactmodules+=ReactActions
		//	reactmodules+=ReactLibraries
		//	reactmodules+=ReactInfo;
		@Override public ParserRule getRule() { return rule; }
		
		//reactmodules+=ReactConfiguration reactmodules+=ReactComponents reactmodules+=ReactActions reactmodules+=ReactLibraries
		//reactmodules+=ReactInfo
		public Group getGroup() { return cGroup; }
		
		//reactmodules+=ReactConfiguration
		public Assignment getReactmodulesAssignment_0() { return cReactmodulesAssignment_0; }
		
		//ReactConfiguration
		public RuleCall getReactmodulesReactConfigurationParserRuleCall_0_0() { return cReactmodulesReactConfigurationParserRuleCall_0_0; }
		
		//reactmodules+=ReactComponents
		public Assignment getReactmodulesAssignment_1() { return cReactmodulesAssignment_1; }
		
		//ReactComponents
		public RuleCall getReactmodulesReactComponentsParserRuleCall_1_0() { return cReactmodulesReactComponentsParserRuleCall_1_0; }
		
		//reactmodules+=ReactActions
		public Assignment getReactmodulesAssignment_2() { return cReactmodulesAssignment_2; }
		
		//ReactActions
		public RuleCall getReactmodulesReactActionsParserRuleCall_2_0() { return cReactmodulesReactActionsParserRuleCall_2_0; }
		
		//reactmodules+=ReactLibraries
		public Assignment getReactmodulesAssignment_3() { return cReactmodulesAssignment_3; }
		
		//ReactLibraries
		public RuleCall getReactmodulesReactLibrariesParserRuleCall_3_0() { return cReactmodulesReactLibrariesParserRuleCall_3_0; }
		
		//reactmodules+=ReactInfo
		public Assignment getReactmodulesAssignment_4() { return cReactmodulesAssignment_4; }
		
		//ReactInfo
		public RuleCall getReactmodulesReactInfoParserRuleCall_4_0() { return cReactmodulesReactInfoParserRuleCall_4_0; }
	}
	public class ReactConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReactConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReactConfigurationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDependenciesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDependenciesReactDependenciesParserRuleCall_3_0 = (RuleCall)cDependenciesAssignment_3.eContents().get(0);
		private final Assignment cConfigurationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConfigurationsReactConfigurationsParserRuleCall_4_0 = (RuleCall)cConfigurationsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ReactConfiguration:
		//	'ReactConfiguration' ':' '{' dependencies+=ReactDependencies configurations+=ReactConfigurations '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ReactConfiguration' ':' '{' dependencies+=ReactDependencies configurations+=ReactConfigurations '}'
		public Group getGroup() { return cGroup; }
		
		//'ReactConfiguration'
		public Keyword getReactConfigurationKeyword_0() { return cReactConfigurationKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//dependencies+=ReactDependencies
		public Assignment getDependenciesAssignment_3() { return cDependenciesAssignment_3; }
		
		//ReactDependencies
		public RuleCall getDependenciesReactDependenciesParserRuleCall_3_0() { return cDependenciesReactDependenciesParserRuleCall_3_0; }
		
		//configurations+=ReactConfigurations
		public Assignment getConfigurationsAssignment_4() { return cConfigurationsAssignment_4; }
		
		//ReactConfigurations
		public RuleCall getConfigurationsReactConfigurationsParserRuleCall_4_0() { return cConfigurationsReactConfigurationsParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ReactDependenciesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReactDependencies");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDependenciesStructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDependenciesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDependenciesReactDependenciesRulesParserRuleCall_1_0 = (RuleCall)cDependenciesAssignment_1.eContents().get(0);
		
		//ReactDependencies:
		//	'DependenciesStruct' dependencies+=ReactDependenciesRules+;
		@Override public ParserRule getRule() { return rule; }
		
		//'DependenciesStruct' dependencies+=ReactDependenciesRules+
		public Group getGroup() { return cGroup; }
		
		//'DependenciesStruct'
		public Keyword getDependenciesStructKeyword_0() { return cDependenciesStructKeyword_0; }
		
		//dependencies+=ReactDependenciesRules+
		public Assignment getDependenciesAssignment_1() { return cDependenciesAssignment_1; }
		
		//ReactDependenciesRules
		public RuleCall getDependenciesReactDependenciesRulesParserRuleCall_1_0() { return cDependenciesReactDependenciesRulesParserRuleCall_1_0; }
	}
	public class ReactDependenciesRulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReactDependenciesRules");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDependencyTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDependenciesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDependenciesReactDependenciesSubRulesParserRuleCall_2_0 = (RuleCall)cDependenciesAssignment_2.eContents().get(0);
		
		//ReactDependenciesRules:
		//	'DependencyType' name=ID dependencies+=ReactDependenciesSubRules+;
		@Override public ParserRule getRule() { return rule; }
		
		//'DependencyType' name=ID dependencies+=ReactDependenciesSubRules+
		public Group getGroup() { return cGroup; }
		
		//'DependencyType'
		public Keyword getDependencyTypeKeyword_0() { return cDependencyTypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//dependencies+=ReactDependenciesSubRules+
		public Assignment getDependenciesAssignment_2() { return cDependenciesAssignment_2; }
		
		//ReactDependenciesSubRules
		public RuleCall getDependenciesReactDependenciesSubRulesParserRuleCall_2_0() { return cDependenciesReactDependenciesSubRulesParserRuleCall_2_0; }
	}
	public class ReactDependenciesSubRulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReactDependenciesSubRules");
		private final Assignment cDependenciesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDependenciesSingleDependenciesParserRuleCall_0 = (RuleCall)cDependenciesAssignment.eContents().get(0);
		
		//ReactDependenciesSubRules:
		//	dependencies+=SingleDependencies;
		@Override public ParserRule getRule() { return rule; }
		
		//dependencies+=SingleDependencies
		public Assignment getDependenciesAssignment() { return cDependenciesAssignment; }
		
		//SingleDependencies
		public RuleCall getDependenciesSingleDependenciesParserRuleCall_0() { return cDependenciesSingleDependenciesParserRuleCall_0; }
	}
	public class SingleDependenciesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SingleDependencies");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDependenciesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDependenciesPackageNameParserRuleCall_0_0 = (RuleCall)cDependenciesAssignment_0.eContents().get(0);
		private final Assignment cDependenciesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDependenciesPackageVersionParserRuleCall_1_0 = (RuleCall)cDependenciesAssignment_1.eContents().get(0);
		
		//SingleDependencies:
		//	dependencies+=PackageName dependencies+=PackageVersion;
		@Override public ParserRule getRule() { return rule; }
		
		//dependencies+=PackageName dependencies+=PackageVersion
		public Group getGroup() { return cGroup; }
		
		//dependencies+=PackageName
		public Assignment getDependenciesAssignment_0() { return cDependenciesAssignment_0; }
		
		//PackageName
		public RuleCall getDependenciesPackageNameParserRuleCall_0_0() { return cDependenciesPackageNameParserRuleCall_0_0; }
		
		//dependencies+=PackageVersion
		public Assignment getDependenciesAssignment_1() { return cDependenciesAssignment_1; }
		
		//PackageVersion
		public RuleCall getDependenciesPackageVersionParserRuleCall_1_0() { return cDependenciesPackageVersionParserRuleCall_1_0; }
	}
	public class PackageNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PackageName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//PackageName:
		//	'PackageName' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'PackageName' name=ID
		public Group getGroup() { return cGroup; }
		
		//'PackageName'
		public Keyword getPackageNameKeyword_0() { return cPackageNameKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class PackageVersionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PackageVersion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageVersionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//PackageVersion:
		//	'PackageVersion' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'PackageVersion' name=ID
		public Group getGroup() { return cGroup; }
		
		//'PackageVersion'
		public Keyword getPackageVersionKeyword_0() { return cPackageVersionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ReactConfigurationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReactConfigurations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReactDOMConfigurationsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cConfigurationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConfigurationsDOMConfigurationsParserRuleCall_2_0 = (RuleCall)cConfigurationsAssignment_2.eContents().get(0);
		
		//ReactConfigurations:
		//	'ReactDOMConfigurations' name=ID configurations+=DOMConfigurations+;
		@Override public ParserRule getRule() { return rule; }
		
		//'ReactDOMConfigurations' name=ID configurations+=DOMConfigurations+
		public Group getGroup() { return cGroup; }
		
		//'ReactDOMConfigurations'
		public Keyword getReactDOMConfigurationsKeyword_0() { return cReactDOMConfigurationsKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//configurations+=DOMConfigurations+
		public Assignment getConfigurationsAssignment_2() { return cConfigurationsAssignment_2; }
		
		//DOMConfigurations
		public RuleCall getConfigurationsDOMConfigurationsParserRuleCall_2_0() { return cConfigurationsDOMConfigurationsParserRuleCall_2_0; }
	}
	public class DOMConfigurationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DOMConfigurations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsDOMTypeConfParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//DOMConfigurations:
		//	elements+=DOMTypeConf name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=DOMTypeConf name=ID
		public Group getGroup() { return cGroup; }
		
		//elements+=DOMTypeConf
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//DOMTypeConf
		public RuleCall getElementsDOMTypeConfParserRuleCall_0_0() { return cElementsDOMTypeConfParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class DOMTypeConfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DOMTypeConf");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRoutingConfKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cServiceWorkerKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cHTMLStructureKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cManifestKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cRepositoriesConfKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//DOMTypeConf:
		//	'RoutingConf' | 'ServiceWorker' | 'HTMLStructure' | 'Manifest' | 'RepositoriesConf';
		@Override public ParserRule getRule() { return rule; }
		
		//'RoutingConf' | 'ServiceWorker' | 'HTMLStructure' | 'Manifest' | 'RepositoriesConf'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'RoutingConf'
		public Keyword getRoutingConfKeyword_0() { return cRoutingConfKeyword_0; }
		
		//'ServiceWorker'
		public Keyword getServiceWorkerKeyword_1() { return cServiceWorkerKeyword_1; }
		
		//'HTMLStructure'
		public Keyword getHTMLStructureKeyword_2() { return cHTMLStructureKeyword_2; }
		
		//'Manifest'
		public Keyword getManifestKeyword_3() { return cManifestKeyword_3; }
		
		//'RepositoriesConf'
		public Keyword getRepositoriesConfKeyword_4() { return cRepositoriesConfKeyword_4; }
	}
	public class ReactComponentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReactComponents");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReactComponentsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cComponentslogicAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComponentslogicComponentsLogicParserRuleCall_3_0 = (RuleCall)cComponentslogicAssignment_3.eContents().get(0);
		private final Assignment cComponentsuiAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cComponentsuiComponentsUIParserRuleCall_4_0 = (RuleCall)cComponentsuiAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ReactComponents:
		//	'ReactComponents' ':' '{' componentslogic+=ComponentsLogic componentsui+=ComponentsUI '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ReactComponents' ':' '{' componentslogic+=ComponentsLogic componentsui+=ComponentsUI '}'
		public Group getGroup() { return cGroup; }
		
		//'ReactComponents'
		public Keyword getReactComponentsKeyword_0() { return cReactComponentsKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//componentslogic+=ComponentsLogic
		public Assignment getComponentslogicAssignment_3() { return cComponentslogicAssignment_3; }
		
		//ComponentsLogic
		public RuleCall getComponentslogicComponentsLogicParserRuleCall_3_0() { return cComponentslogicComponentsLogicParserRuleCall_3_0; }
		
		//componentsui+=ComponentsUI
		public Assignment getComponentsuiAssignment_4() { return cComponentsuiAssignment_4; }
		
		//ComponentsUI
		public RuleCall getComponentsuiComponentsUIParserRuleCall_4_0() { return cComponentsuiComponentsUIParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ComponentsLogicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ComponentsLogic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLogicComponentsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLogiccomponentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLogiccomponentsLogicContentParserRuleCall_2_0 = (RuleCall)cLogiccomponentsAssignment_2.eContents().get(0);
		
		//ComponentsLogic:
		//	'LogicComponents' name=ID logiccomponents+=LogicContent;
		@Override public ParserRule getRule() { return rule; }
		
		//'LogicComponents' name=ID logiccomponents+=LogicContent
		public Group getGroup() { return cGroup; }
		
		//'LogicComponents'
		public Keyword getLogicComponentsKeyword_0() { return cLogicComponentsKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//logiccomponents+=LogicContent
		public Assignment getLogiccomponentsAssignment_2() { return cLogiccomponentsAssignment_2; }
		
		//LogicContent
		public RuleCall getLogiccomponentsLogicContentParserRuleCall_2_0() { return cLogiccomponentsLogicContentParserRuleCall_2_0; }
	}
	public class LogicContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LogicContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoutingComponentsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLogiccomponentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLogiccomponentsLogicStructureParserRuleCall_2_0 = (RuleCall)cLogiccomponentsAssignment_2.eContents().get(0);
		
		//LogicContent:
		//	'RoutingComponents' name=ID logiccomponents+=LogicStructure;
		@Override public ParserRule getRule() { return rule; }
		
		//'RoutingComponents' name=ID logiccomponents+=LogicStructure
		public Group getGroup() { return cGroup; }
		
		//'RoutingComponents'
		public Keyword getRoutingComponentsKeyword_0() { return cRoutingComponentsKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//logiccomponents+=LogicStructure
		public Assignment getLogiccomponentsAssignment_2() { return cLogiccomponentsAssignment_2; }
		
		//LogicStructure
		public RuleCall getLogiccomponentsLogicStructureParserRuleCall_2_0() { return cLogiccomponentsLogicStructureParserRuleCall_2_0; }
	}
	public class LogicStructureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LogicStructure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAppComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLogiccomponentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLogiccomponentsComponentClassParserRuleCall_2_0 = (RuleCall)cLogiccomponentsAssignment_2.eContents().get(0);
		private final Keyword cIndexComponentKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		
		//LogicStructure:
		//	'AppComponent' name=ID logiccomponents+=ComponentClass 'IndexComponent' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'AppComponent' name=ID logiccomponents+=ComponentClass 'IndexComponent' name=ID
		public Group getGroup() { return cGroup; }
		
		//'AppComponent'
		public Keyword getAppComponentKeyword_0() { return cAppComponentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//logiccomponents+=ComponentClass
		public Assignment getLogiccomponentsAssignment_2() { return cLogiccomponentsAssignment_2; }
		
		//ComponentClass
		public RuleCall getLogiccomponentsComponentClassParserRuleCall_2_0() { return cLogiccomponentsComponentClassParserRuleCall_2_0; }
		
		//'IndexComponent'
		public Keyword getIndexComponentKeyword_3() { return cIndexComponentKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
	}
	public class ComponentsUIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ComponentsUI");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUIComponentsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cUicomponentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUicomponentsUIContentParserRuleCall_2_0 = (RuleCall)cUicomponentsAssignment_2.eContents().get(0);
		
		//ComponentsUI:
		//	'UIComponents' name=ID uicomponents+=UIContent;
		@Override public ParserRule getRule() { return rule; }
		
		//'UIComponents' name=ID uicomponents+=UIContent
		public Group getGroup() { return cGroup; }
		
		//'UIComponents'
		public Keyword getUIComponentsKeyword_0() { return cUIComponentsKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//uicomponents+=UIContent
		public Assignment getUicomponentsAssignment_2() { return cUicomponentsAssignment_2; }
		
		//UIContent
		public RuleCall getUicomponentsUIContentParserRuleCall_2_0() { return cUicomponentsUIContentParserRuleCall_2_0; }
	}
	public class UIContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.UIContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cViewComponentKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cUicontentAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cUicontentComponentClassParserRuleCall_0_2_0 = (RuleCall)cUicontentAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSubcomponentsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cUicontentAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cUicontentComponentClassParserRuleCall_1_2_0 = (RuleCall)cUicontentAssignment_1_2.eContents().get(0);
		
		//UIContent:
		//	('ViewComponent' name=ID uicontent+=ComponentClass)+ ('Subcomponents' name=ID uicontent+=ComponentClass)+;
		@Override public ParserRule getRule() { return rule; }
		
		//('ViewComponent' name=ID uicontent+=ComponentClass)+ ('Subcomponents' name=ID uicontent+=ComponentClass)+
		public Group getGroup() { return cGroup; }
		
		//('ViewComponent' name=ID uicontent+=ComponentClass)+
		public Group getGroup_0() { return cGroup_0; }
		
		//'ViewComponent'
		public Keyword getViewComponentKeyword_0_0() { return cViewComponentKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//uicontent+=ComponentClass
		public Assignment getUicontentAssignment_0_2() { return cUicontentAssignment_0_2; }
		
		//ComponentClass
		public RuleCall getUicontentComponentClassParserRuleCall_0_2_0() { return cUicontentComponentClassParserRuleCall_0_2_0; }
		
		//('Subcomponents' name=ID uicontent+=ComponentClass)+
		public Group getGroup_1() { return cGroup_1; }
		
		//'Subcomponents'
		public Keyword getSubcomponentsKeyword_1_0() { return cSubcomponentsKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//uicontent+=ComponentClass
		public Assignment getUicontentAssignment_1_2() { return cUicontentAssignment_1_2; }
		
		//ComponentClass
		public RuleCall getUicontentComponentClassParserRuleCall_1_2_0() { return cUicontentComponentClassParserRuleCall_1_2_0; }
	}
	public class ComponentClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ComponentClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cComponentclassAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cComponentclassReactFunctionsParserRuleCall_0_0 = (RuleCall)cComponentclassAssignment_0.eContents().get(0);
		private final Assignment cComponentclassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cComponentclassPropsParserRuleCall_1_0 = (RuleCall)cComponentclassAssignment_1.eContents().get(0);
		
		//ComponentClass:
		//	componentclass+=ReactFunctions componentclass+=Props;
		@Override public ParserRule getRule() { return rule; }
		
		//componentclass+=ReactFunctions componentclass+=Props
		public Group getGroup() { return cGroup; }
		
		//componentclass+=ReactFunctions
		public Assignment getComponentclassAssignment_0() { return cComponentclassAssignment_0; }
		
		//ReactFunctions
		public RuleCall getComponentclassReactFunctionsParserRuleCall_0_0() { return cComponentclassReactFunctionsParserRuleCall_0_0; }
		
		//componentclass+=Props
		public Assignment getComponentclassAssignment_1() { return cComponentclassAssignment_1; }
		
		//Props
		public RuleCall getComponentclassPropsParserRuleCall_1_0() { return cComponentclassPropsParserRuleCall_1_0; }
	}
	public class ReactFunctionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReactFunctions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cComponentclassAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cComponentclassReactConstructorParserRuleCall_0_0 = (RuleCall)cComponentclassAssignment_0.eContents().get(0);
		private final Assignment cLifecycleclassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLifecycleclassReactLifeCycleParserRuleCall_1_0 = (RuleCall)cLifecycleclassAssignment_1.eContents().get(0);
		private final Assignment cComponentclassAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComponentclassReactCoreFunctionsParserRuleCall_2_0 = (RuleCall)cComponentclassAssignment_2.eContents().get(0);
		private final Assignment cRenderclassAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRenderclassReactRenderParserRuleCall_3_0 = (RuleCall)cRenderclassAssignment_3.eContents().get(0);
		
		//ReactFunctions:
		//	componentclass+=ReactConstructor lifecycleclass+=ReactLifeCycle* componentclass+=ReactCoreFunctions*
		//	renderclass+=ReactRender;
		@Override public ParserRule getRule() { return rule; }
		
		//componentclass+=ReactConstructor lifecycleclass+=ReactLifeCycle* componentclass+=ReactCoreFunctions*
		//renderclass+=ReactRender
		public Group getGroup() { return cGroup; }
		
		//componentclass+=ReactConstructor
		public Assignment getComponentclassAssignment_0() { return cComponentclassAssignment_0; }
		
		//ReactConstructor
		public RuleCall getComponentclassReactConstructorParserRuleCall_0_0() { return cComponentclassReactConstructorParserRuleCall_0_0; }
		
		//lifecycleclass+=ReactLifeCycle*
		public Assignment getLifecycleclassAssignment_1() { return cLifecycleclassAssignment_1; }
		
		//ReactLifeCycle
		public RuleCall getLifecycleclassReactLifeCycleParserRuleCall_1_0() { return cLifecycleclassReactLifeCycleParserRuleCall_1_0; }
		
		//componentclass+=ReactCoreFunctions*
		public Assignment getComponentclassAssignment_2() { return cComponentclassAssignment_2; }
		
		//ReactCoreFunctions
		public RuleCall getComponentclassReactCoreFunctionsParserRuleCall_2_0() { return cComponentclassReactCoreFunctionsParserRuleCall_2_0; }
		
		//renderclass+=ReactRender
		public Assignment getRenderclassAssignment_3() { return cRenderclassAssignment_3; }
		
		//ReactRender
		public RuleCall getRenderclassReactRenderParserRuleCall_3_0() { return cRenderclassReactRenderParserRuleCall_3_0; }
	}
	public class ReactConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReactConstructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstructorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cComponentclassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cComponentclassStateParserRuleCall_1_0 = (RuleCall)cComponentclassAssignment_1.eContents().get(0);
		private final Assignment cComponentclassAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComponentclassCoreFunctionsDeclarationParserRuleCall_2_0 = (RuleCall)cComponentclassAssignment_2.eContents().get(0);
		
		//ReactConstructor:
		//	'Constructor' componentclass+=State componentclass+=CoreFunctionsDeclaration*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Constructor' componentclass+=State componentclass+=CoreFunctionsDeclaration*
		public Group getGroup() { return cGroup; }
		
		//'Constructor'
		public Keyword getConstructorKeyword_0() { return cConstructorKeyword_0; }
		
		//componentclass+=State
		public Assignment getComponentclassAssignment_1() { return cComponentclassAssignment_1; }
		
		//State
		public RuleCall getComponentclassStateParserRuleCall_1_0() { return cComponentclassStateParserRuleCall_1_0; }
		
		//componentclass+=CoreFunctionsDeclaration*
		public Assignment getComponentclassAssignment_2() { return cComponentclassAssignment_2; }
		
		//CoreFunctionsDeclaration
		public RuleCall getComponentclassCoreFunctionsDeclarationParserRuleCall_2_0() { return cComponentclassCoreFunctionsDeclarationParserRuleCall_2_0; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Assignment cComponentclassAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cComponentclassDataTypeParserRuleCall_1_1_0 = (RuleCall)cComponentclassAssignment_1_1.eContents().get(0);
		
		//State:
		//	'State' (name=ID componentclass+=DataType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'State' (name=ID componentclass+=DataType)*
		public Group getGroup() { return cGroup; }
		
		//'State'
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }
		
		//(name=ID componentclass+=DataType)*
		public Group getGroup_1() { return cGroup_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//componentclass+=DataType
		public Assignment getComponentclassAssignment_1_1() { return cComponentclassAssignment_1_1; }
		
		//DataType
		public RuleCall getComponentclassDataTypeParserRuleCall_1_1_0() { return cComponentclassDataTypeParserRuleCall_1_1_0; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cArrayKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cObjectKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cNumberKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cNullKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cBooleanKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//DataType:
		//	'String' | 'Array' | 'Object' | 'Number' | 'null' | 'Boolean';
		@Override public ParserRule getRule() { return rule; }
		
		//'String' | 'Array' | 'Object' | 'Number' | 'null' | 'Boolean'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'String'
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }
		
		//'Array'
		public Keyword getArrayKeyword_1() { return cArrayKeyword_1; }
		
		//'Object'
		public Keyword getObjectKeyword_2() { return cObjectKeyword_2; }
		
		//'Number'
		public Keyword getNumberKeyword_3() { return cNumberKeyword_3; }
		
		//'null'
		public Keyword getNullKeyword_4() { return cNullKeyword_4; }
		
		//'Boolean'
		public Keyword getBooleanKeyword_5() { return cBooleanKeyword_5; }
	}
	public class CoreFunctionsDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CoreFunctionsDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cFunctionBindingDeclarationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//CoreFunctionsDeclaration:
		//	name=ID 'FunctionBindingDeclaration';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'FunctionBindingDeclaration'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'FunctionBindingDeclaration'
		public Keyword getFunctionBindingDeclarationKeyword_1() { return cFunctionBindingDeclarationKeyword_1; }
	}
	public class ReactLifeCycleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReactLifeCycle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cComponentDidMountKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cFunctionStructureKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cComponentDidUpdateKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cFunctionStructureKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cComponentWillUnmountKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cFunctionStructureKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//ReactLifeCycle:
		//	'ComponentDidMount' 'FunctionStructure' |
		//	'ComponentDidUpdate' 'FunctionStructure' |
		//	'ComponentWillUnmount' 'FunctionStructure';
		@Override public ParserRule getRule() { return rule; }
		
		//'ComponentDidMount' 'FunctionStructure' | 'ComponentDidUpdate' 'FunctionStructure' | 'ComponentWillUnmount'
		//'FunctionStructure'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'ComponentDidMount' 'FunctionStructure'
		public Group getGroup_0() { return cGroup_0; }
		
		//'ComponentDidMount'
		public Keyword getComponentDidMountKeyword_0_0() { return cComponentDidMountKeyword_0_0; }
		
		//'FunctionStructure'
		public Keyword getFunctionStructureKeyword_0_1() { return cFunctionStructureKeyword_0_1; }
		
		//'ComponentDidUpdate' 'FunctionStructure'
		public Group getGroup_1() { return cGroup_1; }
		
		//'ComponentDidUpdate'
		public Keyword getComponentDidUpdateKeyword_1_0() { return cComponentDidUpdateKeyword_1_0; }
		
		//'FunctionStructure'
		public Keyword getFunctionStructureKeyword_1_1() { return cFunctionStructureKeyword_1_1; }
		
		//'ComponentWillUnmount' 'FunctionStructure'
		public Group getGroup_2() { return cGroup_2; }
		
		//'ComponentWillUnmount'
		public Keyword getComponentWillUnmountKeyword_2_0() { return cComponentWillUnmountKeyword_2_0; }
		
		//'FunctionStructure'
		public Keyword getFunctionStructureKeyword_2_1() { return cFunctionStructureKeyword_2_1; }
	}
	public class ReactRenderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReactRender");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRenderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRenderContentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ReactRender:
		//	'Render' 'RenderContent';
		@Override public ParserRule getRule() { return rule; }
		
		//'Render' 'RenderContent'
		public Group getGroup() { return cGroup; }
		
		//'Render'
		public Keyword getRenderKeyword_0() { return cRenderKeyword_0; }
		
		//'RenderContent'
		public Keyword getRenderContentKeyword_1() { return cRenderContentKeyword_1; }
	}
	public class PropsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Props");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Assignment cComponentclassAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cComponentclassDataTypeParserRuleCall_1_1_0 = (RuleCall)cComponentclassAssignment_1_1.eContents().get(0);
		
		//Props:
		//	'Props' (name=ID componentclass+=DataType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Props' (name=ID componentclass+=DataType)*
		public Group getGroup() { return cGroup; }
		
		//'Props'
		public Keyword getPropsKeyword_0() { return cPropsKeyword_0; }
		
		//(name=ID componentclass+=DataType)*
		public Group getGroup_1() { return cGroup_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//componentclass+=DataType
		public Assignment getComponentclassAssignment_1_1() { return cComponentclassAssignment_1_1; }
		
		//DataType
		public RuleCall getComponentclassDataTypeParserRuleCall_1_1_0() { return cComponentclassDataTypeParserRuleCall_1_1_0; }
	}
	public class ReactCoreFunctionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReactCoreFunctions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cFunctionStructureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ReactCoreFunctions:
		//	name=ID 'FunctionStructure';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'FunctionStructure'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'FunctionStructure'
		public Keyword getFunctionStructureKeyword_1() { return cFunctionStructureKeyword_1; }
	}
	public class ReactActionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReactActions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReactActionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cReactactcontentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cReactactcontentReactActionsContentParserRuleCall_3_0 = (RuleCall)cReactactcontentAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ReactActions:
		//	'ReactActions' ':' '{' reactactcontent+=ReactActionsContent '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ReactActions' ':' '{' reactactcontent+=ReactActionsContent '}'
		public Group getGroup() { return cGroup; }
		
		//'ReactActions'
		public Keyword getReactActionsKeyword_0() { return cReactActionsKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//reactactcontent+=ReactActionsContent
		public Assignment getReactactcontentAssignment_3() { return cReactactcontentAssignment_3; }
		
		//ReactActionsContent
		public RuleCall getReactactcontentReactActionsContentParserRuleCall_3_0() { return cReactactcontentReactActionsContentParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ReactActionsContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReactActionsContent");
		private final Assignment cReactrelcontentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cReactrelcontentReactServicesRelationParserRuleCall_0 = (RuleCall)cReactrelcontentAssignment.eContents().get(0);
		
		//ReactActionsContent:
		//	reactrelcontent+=ReactServicesRelation+;
		@Override public ParserRule getRule() { return rule; }
		
		//reactrelcontent+=ReactServicesRelation+
		public Assignment getReactrelcontentAssignment() { return cReactrelcontentAssignment; }
		
		//ReactServicesRelation
		public RuleCall getReactrelcontentReactServicesRelationParserRuleCall_0() { return cReactrelcontentReactServicesRelationParserRuleCall_0; }
	}
	public class ReactServicesTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReactServicesType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cServiceContentKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ReactServicesType:
		//	'ServiceType' name=ID 'ServiceContent';
		@Override public ParserRule getRule() { return rule; }
		
		//'ServiceType' name=ID 'ServiceContent'
		public Group getGroup() { return cGroup; }
		
		//'ServiceType'
		public Keyword getServiceTypeKeyword_0() { return cServiceTypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'ServiceContent'
		public Keyword getServiceContentKeyword_2() { return cServiceContentKeyword_2; }
	}
	public class ReactServicesRelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReactServicesRelation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServicesRelationsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cReactrelationcontentAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cReactrelationcontentReactServicesTypeParserRuleCall_1_0_0 = (RuleCall)cReactrelationcontentAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final RuleCall cReactRequestParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//ReactServicesRelation:
		//	'ServicesRelations' (reactrelationcontent+=ReactServicesType name=ID ReactRequest)+;
		@Override public ParserRule getRule() { return rule; }
		
		//'ServicesRelations' (reactrelationcontent+=ReactServicesType name=ID ReactRequest)+
		public Group getGroup() { return cGroup; }
		
		//'ServicesRelations'
		public Keyword getServicesRelationsKeyword_0() { return cServicesRelationsKeyword_0; }
		
		//(reactrelationcontent+=ReactServicesType name=ID ReactRequest)+
		public Group getGroup_1() { return cGroup_1; }
		
		//reactrelationcontent+=ReactServicesType
		public Assignment getReactrelationcontentAssignment_1_0() { return cReactrelationcontentAssignment_1_0; }
		
		//ReactServicesType
		public RuleCall getReactrelationcontentReactServicesTypeParserRuleCall_1_0_0() { return cReactrelationcontentReactServicesTypeParserRuleCall_1_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//ReactRequest
		public RuleCall getReactRequestParserRuleCall_1_2() { return cReactRequestParserRuleCall_1_2; }
	}
	public class ReactRequestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReactRequest");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cWrapperKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAuxWrapperKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ReactRequest:
		//	'Wrapper' | 'AuxWrapper';
		@Override public ParserRule getRule() { return rule; }
		
		//'Wrapper' | 'AuxWrapper'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Wrapper'
		public Keyword getWrapperKeyword_0() { return cWrapperKeyword_0; }
		
		//'AuxWrapper'
		public Keyword getAuxWrapperKeyword_1() { return cAuxWrapperKeyword_1; }
	}
	public class ReactLibrariesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReactLibraries");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReactLibrariesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cReactlibrariesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cReactlibrariesReactLibraryParserRuleCall_3_0 = (RuleCall)cReactlibrariesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ReactLibraries:
		//	'ReactLibraries' ':' '{' reactlibraries+=ReactLibrary+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ReactLibraries' ':' '{' reactlibraries+=ReactLibrary+ '}'
		public Group getGroup() { return cGroup; }
		
		//'ReactLibraries'
		public Keyword getReactLibrariesKeyword_0() { return cReactLibrariesKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//reactlibraries+=ReactLibrary+
		public Assignment getReactlibrariesAssignment_3() { return cReactlibrariesAssignment_3; }
		
		//ReactLibrary
		public RuleCall getReactlibrariesReactLibraryParserRuleCall_3_0() { return cReactlibrariesReactLibraryParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ReactLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReactLibrary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cReactLibraryTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLibraryContentKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ReactLibrary:
		//	ReactLibraryType name=ID 'LibraryContent';
		@Override public ParserRule getRule() { return rule; }
		
		//ReactLibraryType name=ID 'LibraryContent'
		public Group getGroup() { return cGroup; }
		
		//ReactLibraryType
		public RuleCall getReactLibraryTypeParserRuleCall_0() { return cReactLibraryTypeParserRuleCall_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'LibraryContent'
		public Keyword getLibraryContentKeyword_2() { return cLibraryContentKeyword_2; }
	}
	public class ReactLibraryTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReactLibraryType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cReactDesignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cReactRoutingKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cComponentManagementKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cStoreManagementKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cReactDeploymentKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cConfigurationLibraryKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//ReactLibraryType:
		//	'ReactDesign' | 'ReactRouting' | 'ComponentManagement' |
		//	'StoreManagement' | 'ReactDeployment' | 'ConfigurationLibrary';
		@Override public ParserRule getRule() { return rule; }
		
		//'ReactDesign' | 'ReactRouting' | 'ComponentManagement' | 'StoreManagement' | 'ReactDeployment' | 'ConfigurationLibrary'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'ReactDesign'
		public Keyword getReactDesignKeyword_0() { return cReactDesignKeyword_0; }
		
		//'ReactRouting'
		public Keyword getReactRoutingKeyword_1() { return cReactRoutingKeyword_1; }
		
		//'ComponentManagement'
		public Keyword getComponentManagementKeyword_2() { return cComponentManagementKeyword_2; }
		
		//'StoreManagement'
		public Keyword getStoreManagementKeyword_3() { return cStoreManagementKeyword_3; }
		
		//'ReactDeployment'
		public Keyword getReactDeploymentKeyword_4() { return cReactDeploymentKeyword_4; }
		
		//'ConfigurationLibrary'
		public Keyword getConfigurationLibraryKeyword_5() { return cConfigurationLibraryKeyword_5; }
	}
	public class ReactInfoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReactInfo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReactInformationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cReactinformationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cReactinformationReactInformationParserRuleCall_3_0 = (RuleCall)cReactinformationAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ReactInfo:
		//	'ReactInformation' ':' '{' reactinformation+=ReactInformation+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ReactInformation' ':' '{' reactinformation+=ReactInformation+ '}'
		public Group getGroup() { return cGroup; }
		
		//'ReactInformation'
		public Keyword getReactInformationKeyword_0() { return cReactInformationKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//reactinformation+=ReactInformation+
		public Assignment getReactinformationAssignment_3() { return cReactinformationAssignment_3; }
		
		//ReactInformation
		public RuleCall getReactinformationReactInformationParserRuleCall_3_0() { return cReactinformationReactInformationParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ReactInformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReactInformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cReactInformationTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cInformationContentKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ReactInformation:
		//	ReactInformationType name=ID 'InformationContent';
		@Override public ParserRule getRule() { return rule; }
		
		//ReactInformationType name=ID 'InformationContent'
		public Group getGroup() { return cGroup; }
		
		//ReactInformationType
		public RuleCall getReactInformationTypeParserRuleCall_0() { return cReactInformationTypeParserRuleCall_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'InformationContent'
		public Keyword getInformationContentKeyword_2() { return cInformationContentKeyword_2; }
	}
	public class ReactInformationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReactInformationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cReactReadmeKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cReactAditionalInfoKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ReactInformationType:
		//	'ReactReadme' | 'ReactAditionalInfo';
		@Override public ParserRule getRule() { return rule; }
		
		//'ReactReadme' | 'ReactAditionalInfo'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'ReactReadme'
		public Keyword getReactReadmeKeyword_0() { return cReactReadmeKeyword_0; }
		
		//'ReactAditionalInfo'
		public Keyword getReactAditionalInfoKeyword_1() { return cReactAditionalInfoKeyword_1; }
	}
	public class SpringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Spring");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpringKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		////Spring
		//Spring:
		//	'Spring' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Spring' name=ID
		public Group getGroup() { return cGroup; }
		
		//'Spring'
		public Keyword getSpringKeyword_0() { return cSpringKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class PostgreSQLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PostgreSQL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPostgreSQLKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//PostgreSQL:
		//	'PostgreSQL' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'PostgreSQL' name=ID
		public Group getGroup() { return cGroup; }
		
		//'PostgreSQL'
		public Keyword getPostgreSQLKeyword_0() { return cPostgreSQLKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class AmazonWebServicesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.AmazonWebServices");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAmazonWebServicesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//AmazonWebServices:
		//	'AmazonWebServices' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'AmazonWebServices' name=ID
		public Group getGroup() { return cGroup; }
		
		//'AmazonWebServices'
		public Keyword getAmazonWebServicesKeyword_0() { return cAmazonWebServicesKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final DomainElements pDomain;
	private final EntityElements pEntity;
	private final EntitiesElements pEntities;
	private final PhotoElements pPhoto;
	private final AlbumElements pAlbum;
	private final UserDomainElements pUserDomain;
	private final FunctionalityElements pFunctionality;
	private final FunctionalitiesElements pFunctionalities;
	private final ProfileManagementElements pProfileManagement;
	private final ProfileManagementFunctionsElements pProfileManagementFunctions;
	private final AppAccessElements pAppAccess;
	private final AppAccessFunctionsElements pAppAccessFunctions;
	private final AlbumManagementElements pAlbumManagement;
	private final AlbumManagementFunctionsElements pAlbumManagementFunctions;
	private final PhotoActionsElements pPhotoActions;
	private final PhotoActionsFunctionsElements pPhotoActionsFunctions;
	private final LandingActionsElements pLandingActions;
	private final LandingFunctionsElements pLandingFunctions;
	private final DomainConnectionElements pDomainConnection;
	private final DomainRelationsElements pDomainRelations;
	private final ArchitectureElements pArchitecture;
	private final TechnologyElements pTechnology;
	private final TechnologiesElements pTechnologies;
	private final ReactElements pReact;
	private final ReactModulesElements pReactModules;
	private final ReactSubModulesElements pReactSubModules;
	private final ReactConfigurationElements pReactConfiguration;
	private final ReactDependenciesElements pReactDependencies;
	private final ReactDependenciesRulesElements pReactDependenciesRules;
	private final ReactDependenciesSubRulesElements pReactDependenciesSubRules;
	private final SingleDependenciesElements pSingleDependencies;
	private final PackageNameElements pPackageName;
	private final PackageVersionElements pPackageVersion;
	private final ReactConfigurationsElements pReactConfigurations;
	private final DOMConfigurationsElements pDOMConfigurations;
	private final DOMTypeConfElements pDOMTypeConf;
	private final ReactComponentsElements pReactComponents;
	private final ComponentsLogicElements pComponentsLogic;
	private final LogicContentElements pLogicContent;
	private final LogicStructureElements pLogicStructure;
	private final ComponentsUIElements pComponentsUI;
	private final UIContentElements pUIContent;
	private final ComponentClassElements pComponentClass;
	private final ReactFunctionsElements pReactFunctions;
	private final ReactConstructorElements pReactConstructor;
	private final StateElements pState;
	private final DataTypeElements pDataType;
	private final CoreFunctionsDeclarationElements pCoreFunctionsDeclaration;
	private final ReactLifeCycleElements pReactLifeCycle;
	private final ReactRenderElements pReactRender;
	private final PropsElements pProps;
	private final ReactCoreFunctionsElements pReactCoreFunctions;
	private final ReactActionsElements pReactActions;
	private final ReactActionsContentElements pReactActionsContent;
	private final ReactServicesTypeElements pReactServicesType;
	private final ReactServicesRelationElements pReactServicesRelation;
	private final ReactRequestElements pReactRequest;
	private final ReactLibrariesElements pReactLibraries;
	private final ReactLibraryElements pReactLibrary;
	private final ReactLibraryTypeElements pReactLibraryType;
	private final ReactInfoElements pReactInfo;
	private final ReactInformationElements pReactInformation;
	private final ReactInformationTypeElements pReactInformationType;
	private final SpringElements pSpring;
	private final PostgreSQLElements pPostgreSQL;
	private final AmazonWebServicesElements pAmazonWebServices;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pDomain = new DomainElements();
		this.pEntity = new EntityElements();
		this.pEntities = new EntitiesElements();
		this.pPhoto = new PhotoElements();
		this.pAlbum = new AlbumElements();
		this.pUserDomain = new UserDomainElements();
		this.pFunctionality = new FunctionalityElements();
		this.pFunctionalities = new FunctionalitiesElements();
		this.pProfileManagement = new ProfileManagementElements();
		this.pProfileManagementFunctions = new ProfileManagementFunctionsElements();
		this.pAppAccess = new AppAccessElements();
		this.pAppAccessFunctions = new AppAccessFunctionsElements();
		this.pAlbumManagement = new AlbumManagementElements();
		this.pAlbumManagementFunctions = new AlbumManagementFunctionsElements();
		this.pPhotoActions = new PhotoActionsElements();
		this.pPhotoActionsFunctions = new PhotoActionsFunctionsElements();
		this.pLandingActions = new LandingActionsElements();
		this.pLandingFunctions = new LandingFunctionsElements();
		this.pDomainConnection = new DomainConnectionElements();
		this.pDomainRelations = new DomainRelationsElements();
		this.pArchitecture = new ArchitectureElements();
		this.pTechnology = new TechnologyElements();
		this.pTechnologies = new TechnologiesElements();
		this.pReact = new ReactElements();
		this.pReactModules = new ReactModulesElements();
		this.pReactSubModules = new ReactSubModulesElements();
		this.pReactConfiguration = new ReactConfigurationElements();
		this.pReactDependencies = new ReactDependenciesElements();
		this.pReactDependenciesRules = new ReactDependenciesRulesElements();
		this.pReactDependenciesSubRules = new ReactDependenciesSubRulesElements();
		this.pSingleDependencies = new SingleDependenciesElements();
		this.pPackageName = new PackageNameElements();
		this.pPackageVersion = new PackageVersionElements();
		this.pReactConfigurations = new ReactConfigurationsElements();
		this.pDOMConfigurations = new DOMConfigurationsElements();
		this.pDOMTypeConf = new DOMTypeConfElements();
		this.pReactComponents = new ReactComponentsElements();
		this.pComponentsLogic = new ComponentsLogicElements();
		this.pLogicContent = new LogicContentElements();
		this.pLogicStructure = new LogicStructureElements();
		this.pComponentsUI = new ComponentsUIElements();
		this.pUIContent = new UIContentElements();
		this.pComponentClass = new ComponentClassElements();
		this.pReactFunctions = new ReactFunctionsElements();
		this.pReactConstructor = new ReactConstructorElements();
		this.pState = new StateElements();
		this.pDataType = new DataTypeElements();
		this.pCoreFunctionsDeclaration = new CoreFunctionsDeclarationElements();
		this.pReactLifeCycle = new ReactLifeCycleElements();
		this.pReactRender = new ReactRenderElements();
		this.pProps = new PropsElements();
		this.pReactCoreFunctions = new ReactCoreFunctionsElements();
		this.pReactActions = new ReactActionsElements();
		this.pReactActionsContent = new ReactActionsContentElements();
		this.pReactServicesType = new ReactServicesTypeElements();
		this.pReactServicesRelation = new ReactServicesRelationElements();
		this.pReactRequest = new ReactRequestElements();
		this.pReactLibraries = new ReactLibrariesElements();
		this.pReactLibrary = new ReactLibraryElements();
		this.pReactLibraryType = new ReactLibraryTypeElements();
		this.pReactInfo = new ReactInfoElements();
		this.pReactInformation = new ReactInformationElements();
		this.pReactInformationType = new ReactInformationTypeElements();
		this.pSpring = new SpringElements();
		this.pPostgreSQL = new PostgreSQLElements();
		this.pAmazonWebServices = new AmazonWebServicesElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////System
	//Model:
	//	'System' ':' '{' elements+=Domain elements+=Architecture elements+=Technology '}';
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//// Domain
	//Domain:
	//	'Domain' name=ID ':' '{' elements+=Entity elements+=Functionality elements+=DomainConnection '}';
	public DomainElements getDomainAccess() {
		return pDomain;
	}
	
	public ParserRule getDomainRule() {
		return getDomainAccess().getRule();
	}
	
	//// Domain - Entities
	//Entity:
	//	'Entities' ':' '{' elements+=Entities '}';
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Entities:
	//	elements+=Photo+ elements+=Album+ elements+=UserDomain+;
	public EntitiesElements getEntitiesAccess() {
		return pEntities;
	}
	
	public ParserRule getEntitiesRule() {
		return getEntitiesAccess().getRule();
	}
	
	//Photo:
	//	'Photo' name=ID;
	public PhotoElements getPhotoAccess() {
		return pPhoto;
	}
	
	public ParserRule getPhotoRule() {
		return getPhotoAccess().getRule();
	}
	
	//Album:
	//	'Album' name=ID;
	public AlbumElements getAlbumAccess() {
		return pAlbum;
	}
	
	public ParserRule getAlbumRule() {
		return getAlbumAccess().getRule();
	}
	
	//UserDomain:
	//	'UserDomain' name=ID;
	public UserDomainElements getUserDomainAccess() {
		return pUserDomain;
	}
	
	public ParserRule getUserDomainRule() {
		return getUserDomainAccess().getRule();
	}
	
	//// Domain - Functionalities
	//Functionality:
	//	'Functionalities' ':' '{' elements+=Functionalities '}';
	public FunctionalityElements getFunctionalityAccess() {
		return pFunctionality;
	}
	
	public ParserRule getFunctionalityRule() {
		return getFunctionalityAccess().getRule();
	}
	
	//Functionalities:
	//	functions+=ProfileManagement
	//	elements+=AppAccess
	//	items+=AlbumManagement
	//	resources+=PhotoActions
	//	aditionals+=LandingActions;
	public FunctionalitiesElements getFunctionalitiesAccess() {
		return pFunctionalities;
	}
	
	public ParserRule getFunctionalitiesRule() {
		return getFunctionalitiesAccess().getRule();
	}
	
	//ProfileManagement:
	//	'ProfileManagement' ':' items+=ProfileManagementFunctions;
	public ProfileManagementElements getProfileManagementAccess() {
		return pProfileManagement;
	}
	
	public ParserRule getProfileManagementRule() {
		return getProfileManagementAccess().getRule();
	}
	
	//ProfileManagementFunctions:
	//	'ViewProfilePhoto' name=ID 'EditProfileInfo' name=ID;
	public ProfileManagementFunctionsElements getProfileManagementFunctionsAccess() {
		return pProfileManagementFunctions;
	}
	
	public ParserRule getProfileManagementFunctionsRule() {
		return getProfileManagementFunctionsAccess().getRule();
	}
	
	//AppAccess:
	//	'AppAccess' ':' items+=AppAccessFunctions;
	public AppAccessElements getAppAccessAccess() {
		return pAppAccess;
	}
	
	public ParserRule getAppAccessRule() {
		return getAppAccessAccess().getRule();
	}
	
	//AppAccessFunctions:
	//	'Login' name=ID 'Register' name=ID;
	public AppAccessFunctionsElements getAppAccessFunctionsAccess() {
		return pAppAccessFunctions;
	}
	
	public ParserRule getAppAccessFunctionsRule() {
		return getAppAccessFunctionsAccess().getRule();
	}
	
	//AlbumManagement:
	//	'AlbumManagement' ':' items+=AlbumManagementFunctions;
	public AlbumManagementElements getAlbumManagementAccess() {
		return pAlbumManagement;
	}
	
	public ParserRule getAlbumManagementRule() {
		return getAlbumManagementAccess().getRule();
	}
	
	//AlbumManagementFunctions:
	//	'CreateAlbum' name=ID 'SelectAlbum' name=ID;
	public AlbumManagementFunctionsElements getAlbumManagementFunctionsAccess() {
		return pAlbumManagementFunctions;
	}
	
	public ParserRule getAlbumManagementFunctionsRule() {
		return getAlbumManagementFunctionsAccess().getRule();
	}
	
	//PhotoActions:
	//	'PhotoActions' ':' items+=PhotoActionsFunctions;
	public PhotoActionsElements getPhotoActionsAccess() {
		return pPhotoActions;
	}
	
	public ParserRule getPhotoActionsRule() {
		return getPhotoActionsAccess().getRule();
	}
	
	//PhotoActionsFunctions:
	//	'ViewAllPhotos' name=ID 'ViewExtendedPhoto' name=ID 'LoadPhoto' name=ID;
	public PhotoActionsFunctionsElements getPhotoActionsFunctionsAccess() {
		return pPhotoActionsFunctions;
	}
	
	public ParserRule getPhotoActionsFunctionsRule() {
		return getPhotoActionsFunctionsAccess().getRule();
	}
	
	//LandingActions:
	//	'LandingActions' ':' items+=LandingFunctions;
	public LandingActionsElements getLandingActionsAccess() {
		return pLandingActions;
	}
	
	public ParserRule getLandingActionsRule() {
		return getLandingActionsAccess().getRule();
	}
	
	//LandingFunctions:
	//	'ViewCarousel' name=ID 'PassPhoto' name=ID;
	public LandingFunctionsElements getLandingFunctionsAccess() {
		return pLandingFunctions;
	}
	
	public ParserRule getLandingFunctionsRule() {
		return getLandingFunctionsAccess().getRule();
	}
	
	////Domain - Relations
	//DomainConnection:
	//	'DomainRelations' ':' '{' elements+=DomainRelations '}';
	public DomainConnectionElements getDomainConnectionAccess() {
		return pDomainConnection;
	}
	
	public ParserRule getDomainConnectionRule() {
		return getDomainConnectionAccess().getRule();
	}
	
	//DomainRelations:
	//	elements+=UserDomain name=ID ':' '{' elements+=Functionalities '}'
	//	elements+=Album name=ID ':' '{' elements+=AlbumManagementFunctions '}'
	//	elements+=Photo name=ID ':' '{' elements+=PhotoActionsFunctions '}'
	//	elements+=PhotoActions name=ID ':' '{' elements+=AlbumManagement '}';
	public DomainRelationsElements getDomainRelationsAccess() {
		return pDomainRelations;
	}
	
	public ParserRule getDomainRelationsRule() {
		return getDomainRelationsAccess().getRule();
	}
	
	////Architecture
	//Architecture:
	//	'Architecture:' '{' name=ID '}';
	public ArchitectureElements getArchitectureAccess() {
		return pArchitecture;
	}
	
	public ParserRule getArchitectureRule() {
		return getArchitectureAccess().getRule();
	}
	
	////Technology
	//Technology:
	//	'Technology' name=ID ':' '{' elements+=Technologies '}';
	public TechnologyElements getTechnologyAccess() {
		return pTechnology;
	}
	
	public ParserRule getTechnologyRule() {
		return getTechnologyAccess().getRule();
	}
	
	//Technologies:
	//	factors+=Spring factors+=React factors+=PostgreSQL factors+=AmazonWebServices;
	public TechnologiesElements getTechnologiesAccess() {
		return pTechnologies;
	}
	
	public ParserRule getTechnologiesRule() {
		return getTechnologiesAccess().getRule();
	}
	
	//React:
	//	'React' name=ID ':' '{' reacts+=ReactModules '}';
	public ReactElements getReactAccess() {
		return pReact;
	}
	
	public ParserRule getReactRule() {
		return getReactAccess().getRule();
	}
	
	//ReactModules:
	//	'ReactModules' ':' '{' reactmodules+=ReactSubModules '}';
	public ReactModulesElements getReactModulesAccess() {
		return pReactModules;
	}
	
	public ParserRule getReactModulesRule() {
		return getReactModulesAccess().getRule();
	}
	
	//ReactSubModules:
	//	reactmodules+=ReactConfiguration
	//	reactmodules+=ReactComponents
	//	reactmodules+=ReactActions
	//	reactmodules+=ReactLibraries
	//	reactmodules+=ReactInfo;
	public ReactSubModulesElements getReactSubModulesAccess() {
		return pReactSubModules;
	}
	
	public ParserRule getReactSubModulesRule() {
		return getReactSubModulesAccess().getRule();
	}
	
	//ReactConfiguration:
	//	'ReactConfiguration' ':' '{' dependencies+=ReactDependencies configurations+=ReactConfigurations '}';
	public ReactConfigurationElements getReactConfigurationAccess() {
		return pReactConfiguration;
	}
	
	public ParserRule getReactConfigurationRule() {
		return getReactConfigurationAccess().getRule();
	}
	
	//ReactDependencies:
	//	'DependenciesStruct' dependencies+=ReactDependenciesRules+;
	public ReactDependenciesElements getReactDependenciesAccess() {
		return pReactDependencies;
	}
	
	public ParserRule getReactDependenciesRule() {
		return getReactDependenciesAccess().getRule();
	}
	
	//ReactDependenciesRules:
	//	'DependencyType' name=ID dependencies+=ReactDependenciesSubRules+;
	public ReactDependenciesRulesElements getReactDependenciesRulesAccess() {
		return pReactDependenciesRules;
	}
	
	public ParserRule getReactDependenciesRulesRule() {
		return getReactDependenciesRulesAccess().getRule();
	}
	
	//ReactDependenciesSubRules:
	//	dependencies+=SingleDependencies;
	public ReactDependenciesSubRulesElements getReactDependenciesSubRulesAccess() {
		return pReactDependenciesSubRules;
	}
	
	public ParserRule getReactDependenciesSubRulesRule() {
		return getReactDependenciesSubRulesAccess().getRule();
	}
	
	//SingleDependencies:
	//	dependencies+=PackageName dependencies+=PackageVersion;
	public SingleDependenciesElements getSingleDependenciesAccess() {
		return pSingleDependencies;
	}
	
	public ParserRule getSingleDependenciesRule() {
		return getSingleDependenciesAccess().getRule();
	}
	
	//PackageName:
	//	'PackageName' name=ID;
	public PackageNameElements getPackageNameAccess() {
		return pPackageName;
	}
	
	public ParserRule getPackageNameRule() {
		return getPackageNameAccess().getRule();
	}
	
	//PackageVersion:
	//	'PackageVersion' name=ID;
	public PackageVersionElements getPackageVersionAccess() {
		return pPackageVersion;
	}
	
	public ParserRule getPackageVersionRule() {
		return getPackageVersionAccess().getRule();
	}
	
	//ReactConfigurations:
	//	'ReactDOMConfigurations' name=ID configurations+=DOMConfigurations+;
	public ReactConfigurationsElements getReactConfigurationsAccess() {
		return pReactConfigurations;
	}
	
	public ParserRule getReactConfigurationsRule() {
		return getReactConfigurationsAccess().getRule();
	}
	
	//DOMConfigurations:
	//	elements+=DOMTypeConf name=ID;
	public DOMConfigurationsElements getDOMConfigurationsAccess() {
		return pDOMConfigurations;
	}
	
	public ParserRule getDOMConfigurationsRule() {
		return getDOMConfigurationsAccess().getRule();
	}
	
	//DOMTypeConf:
	//	'RoutingConf' | 'ServiceWorker' | 'HTMLStructure' | 'Manifest' | 'RepositoriesConf';
	public DOMTypeConfElements getDOMTypeConfAccess() {
		return pDOMTypeConf;
	}
	
	public ParserRule getDOMTypeConfRule() {
		return getDOMTypeConfAccess().getRule();
	}
	
	//ReactComponents:
	//	'ReactComponents' ':' '{' componentslogic+=ComponentsLogic componentsui+=ComponentsUI '}';
	public ReactComponentsElements getReactComponentsAccess() {
		return pReactComponents;
	}
	
	public ParserRule getReactComponentsRule() {
		return getReactComponentsAccess().getRule();
	}
	
	//ComponentsLogic:
	//	'LogicComponents' name=ID logiccomponents+=LogicContent;
	public ComponentsLogicElements getComponentsLogicAccess() {
		return pComponentsLogic;
	}
	
	public ParserRule getComponentsLogicRule() {
		return getComponentsLogicAccess().getRule();
	}
	
	//LogicContent:
	//	'RoutingComponents' name=ID logiccomponents+=LogicStructure;
	public LogicContentElements getLogicContentAccess() {
		return pLogicContent;
	}
	
	public ParserRule getLogicContentRule() {
		return getLogicContentAccess().getRule();
	}
	
	//LogicStructure:
	//	'AppComponent' name=ID logiccomponents+=ComponentClass 'IndexComponent' name=ID;
	public LogicStructureElements getLogicStructureAccess() {
		return pLogicStructure;
	}
	
	public ParserRule getLogicStructureRule() {
		return getLogicStructureAccess().getRule();
	}
	
	//ComponentsUI:
	//	'UIComponents' name=ID uicomponents+=UIContent;
	public ComponentsUIElements getComponentsUIAccess() {
		return pComponentsUI;
	}
	
	public ParserRule getComponentsUIRule() {
		return getComponentsUIAccess().getRule();
	}
	
	//UIContent:
	//	('ViewComponent' name=ID uicontent+=ComponentClass)+ ('Subcomponents' name=ID uicontent+=ComponentClass)+;
	public UIContentElements getUIContentAccess() {
		return pUIContent;
	}
	
	public ParserRule getUIContentRule() {
		return getUIContentAccess().getRule();
	}
	
	//ComponentClass:
	//	componentclass+=ReactFunctions componentclass+=Props;
	public ComponentClassElements getComponentClassAccess() {
		return pComponentClass;
	}
	
	public ParserRule getComponentClassRule() {
		return getComponentClassAccess().getRule();
	}
	
	//ReactFunctions:
	//	componentclass+=ReactConstructor lifecycleclass+=ReactLifeCycle* componentclass+=ReactCoreFunctions*
	//	renderclass+=ReactRender;
	public ReactFunctionsElements getReactFunctionsAccess() {
		return pReactFunctions;
	}
	
	public ParserRule getReactFunctionsRule() {
		return getReactFunctionsAccess().getRule();
	}
	
	//ReactConstructor:
	//	'Constructor' componentclass+=State componentclass+=CoreFunctionsDeclaration*;
	public ReactConstructorElements getReactConstructorAccess() {
		return pReactConstructor;
	}
	
	public ParserRule getReactConstructorRule() {
		return getReactConstructorAccess().getRule();
	}
	
	//State:
	//	'State' (name=ID componentclass+=DataType)*;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//DataType:
	//	'String' | 'Array' | 'Object' | 'Number' | 'null' | 'Boolean';
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//CoreFunctionsDeclaration:
	//	name=ID 'FunctionBindingDeclaration';
	public CoreFunctionsDeclarationElements getCoreFunctionsDeclarationAccess() {
		return pCoreFunctionsDeclaration;
	}
	
	public ParserRule getCoreFunctionsDeclarationRule() {
		return getCoreFunctionsDeclarationAccess().getRule();
	}
	
	//ReactLifeCycle:
	//	'ComponentDidMount' 'FunctionStructure' |
	//	'ComponentDidUpdate' 'FunctionStructure' |
	//	'ComponentWillUnmount' 'FunctionStructure';
	public ReactLifeCycleElements getReactLifeCycleAccess() {
		return pReactLifeCycle;
	}
	
	public ParserRule getReactLifeCycleRule() {
		return getReactLifeCycleAccess().getRule();
	}
	
	//ReactRender:
	//	'Render' 'RenderContent';
	public ReactRenderElements getReactRenderAccess() {
		return pReactRender;
	}
	
	public ParserRule getReactRenderRule() {
		return getReactRenderAccess().getRule();
	}
	
	//Props:
	//	'Props' (name=ID componentclass+=DataType)*;
	public PropsElements getPropsAccess() {
		return pProps;
	}
	
	public ParserRule getPropsRule() {
		return getPropsAccess().getRule();
	}
	
	//ReactCoreFunctions:
	//	name=ID 'FunctionStructure';
	public ReactCoreFunctionsElements getReactCoreFunctionsAccess() {
		return pReactCoreFunctions;
	}
	
	public ParserRule getReactCoreFunctionsRule() {
		return getReactCoreFunctionsAccess().getRule();
	}
	
	//ReactActions:
	//	'ReactActions' ':' '{' reactactcontent+=ReactActionsContent '}';
	public ReactActionsElements getReactActionsAccess() {
		return pReactActions;
	}
	
	public ParserRule getReactActionsRule() {
		return getReactActionsAccess().getRule();
	}
	
	//ReactActionsContent:
	//	reactrelcontent+=ReactServicesRelation+;
	public ReactActionsContentElements getReactActionsContentAccess() {
		return pReactActionsContent;
	}
	
	public ParserRule getReactActionsContentRule() {
		return getReactActionsContentAccess().getRule();
	}
	
	//ReactServicesType:
	//	'ServiceType' name=ID 'ServiceContent';
	public ReactServicesTypeElements getReactServicesTypeAccess() {
		return pReactServicesType;
	}
	
	public ParserRule getReactServicesTypeRule() {
		return getReactServicesTypeAccess().getRule();
	}
	
	//ReactServicesRelation:
	//	'ServicesRelations' (reactrelationcontent+=ReactServicesType name=ID ReactRequest)+;
	public ReactServicesRelationElements getReactServicesRelationAccess() {
		return pReactServicesRelation;
	}
	
	public ParserRule getReactServicesRelationRule() {
		return getReactServicesRelationAccess().getRule();
	}
	
	//ReactRequest:
	//	'Wrapper' | 'AuxWrapper';
	public ReactRequestElements getReactRequestAccess() {
		return pReactRequest;
	}
	
	public ParserRule getReactRequestRule() {
		return getReactRequestAccess().getRule();
	}
	
	//ReactLibraries:
	//	'ReactLibraries' ':' '{' reactlibraries+=ReactLibrary+ '}';
	public ReactLibrariesElements getReactLibrariesAccess() {
		return pReactLibraries;
	}
	
	public ParserRule getReactLibrariesRule() {
		return getReactLibrariesAccess().getRule();
	}
	
	//ReactLibrary:
	//	ReactLibraryType name=ID 'LibraryContent';
	public ReactLibraryElements getReactLibraryAccess() {
		return pReactLibrary;
	}
	
	public ParserRule getReactLibraryRule() {
		return getReactLibraryAccess().getRule();
	}
	
	//ReactLibraryType:
	//	'ReactDesign' | 'ReactRouting' | 'ComponentManagement' |
	//	'StoreManagement' | 'ReactDeployment' | 'ConfigurationLibrary';
	public ReactLibraryTypeElements getReactLibraryTypeAccess() {
		return pReactLibraryType;
	}
	
	public ParserRule getReactLibraryTypeRule() {
		return getReactLibraryTypeAccess().getRule();
	}
	
	//ReactInfo:
	//	'ReactInformation' ':' '{' reactinformation+=ReactInformation+ '}';
	public ReactInfoElements getReactInfoAccess() {
		return pReactInfo;
	}
	
	public ParserRule getReactInfoRule() {
		return getReactInfoAccess().getRule();
	}
	
	//ReactInformation:
	//	ReactInformationType name=ID 'InformationContent';
	public ReactInformationElements getReactInformationAccess() {
		return pReactInformation;
	}
	
	public ParserRule getReactInformationRule() {
		return getReactInformationAccess().getRule();
	}
	
	//ReactInformationType:
	//	'ReactReadme' | 'ReactAditionalInfo';
	public ReactInformationTypeElements getReactInformationTypeAccess() {
		return pReactInformationType;
	}
	
	public ParserRule getReactInformationTypeRule() {
		return getReactInformationTypeAccess().getRule();
	}
	
	////Spring
	//Spring:
	//	'Spring' name=ID;
	public SpringElements getSpringAccess() {
		return pSpring;
	}
	
	public ParserRule getSpringRule() {
		return getSpringAccess().getRule();
	}
	
	//PostgreSQL:
	//	'PostgreSQL' name=ID;
	public PostgreSQLElements getPostgreSQLAccess() {
		return pPostgreSQL;
	}
	
	public ParserRule getPostgreSQLRule() {
		return getPostgreSQLAccess().getRule();
	}
	
	//AmazonWebServices:
	//	'AmazonWebServices' name=ID;
	public AmazonWebServicesElements getAmazonWebServicesAccess() {
		return pAmazonWebServices;
	}
	
	public ParserRule getAmazonWebServicesRule() {
		return getAmazonWebServicesAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
