/*
 * generated by Xtext 2.18.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myDsl.Album;
import org.xtext.example.mydsl.myDsl.AlbumManagement;
import org.xtext.example.mydsl.myDsl.AlbumManagementFunctions;
import org.xtext.example.mydsl.myDsl.AmazonWebServices;
import org.xtext.example.mydsl.myDsl.AppAccess;
import org.xtext.example.mydsl.myDsl.AppAccessFunctions;
import org.xtext.example.mydsl.myDsl.Architecture;
import org.xtext.example.mydsl.myDsl.ArchitectureComponents;
import org.xtext.example.mydsl.myDsl.BackEnd;
import org.xtext.example.mydsl.myDsl.BusinessLogicContent;
import org.xtext.example.mydsl.myDsl.BusinessLogicLayer;
import org.xtext.example.mydsl.myDsl.BusinessLogicSegments;
import org.xtext.example.mydsl.myDsl.ComponentClass;
import org.xtext.example.mydsl.myDsl.ComponentsLogic;
import org.xtext.example.mydsl.myDsl.ComponentsUI;
import org.xtext.example.mydsl.myDsl.CoreFunctionsDeclaration;
import org.xtext.example.mydsl.myDsl.DOMConfigurations;
import org.xtext.example.mydsl.myDsl.DataPersistenceContent;
import org.xtext.example.mydsl.myDsl.DataPersistenceLayer;
import org.xtext.example.mydsl.myDsl.DataPersistenceSegments;
import org.xtext.example.mydsl.myDsl.Directories;
import org.xtext.example.mydsl.myDsl.DirectoryContent;
import org.xtext.example.mydsl.myDsl.Domain;
import org.xtext.example.mydsl.myDsl.DomainConnection;
import org.xtext.example.mydsl.myDsl.DomainRelations;
import org.xtext.example.mydsl.myDsl.Entities;
import org.xtext.example.mydsl.myDsl.Entity;
import org.xtext.example.mydsl.myDsl.FrontEnd;
import org.xtext.example.mydsl.myDsl.Functionalities;
import org.xtext.example.mydsl.myDsl.Functionality;
import org.xtext.example.mydsl.myDsl.LandingActions;
import org.xtext.example.mydsl.myDsl.LandingFunctions;
import org.xtext.example.mydsl.myDsl.Layer;
import org.xtext.example.mydsl.myDsl.LayerRelations;
import org.xtext.example.mydsl.myDsl.LayerSource;
import org.xtext.example.mydsl.myDsl.LayerTarget;
import org.xtext.example.mydsl.myDsl.LogicContent;
import org.xtext.example.mydsl.myDsl.LogicStructure;
import org.xtext.example.mydsl.myDsl.Model;
import org.xtext.example.mydsl.myDsl.MultipleFile;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.NTierSource;
import org.xtext.example.mydsl.myDsl.NTierTarget;
import org.xtext.example.mydsl.myDsl.NTiers;
import org.xtext.example.mydsl.myDsl.NTiersConnections;
import org.xtext.example.mydsl.myDsl.NTiersRelations;
import org.xtext.example.mydsl.myDsl.PackageName;
import org.xtext.example.mydsl.myDsl.PackageVersion;
import org.xtext.example.mydsl.myDsl.PersistenceDataComponent;
import org.xtext.example.mydsl.myDsl.Photo;
import org.xtext.example.mydsl.myDsl.PhotoActions;
import org.xtext.example.mydsl.myDsl.PhotoActionsFunctions;
import org.xtext.example.mydsl.myDsl.PostgreSQL;
import org.xtext.example.mydsl.myDsl.PresentationContent;
import org.xtext.example.mydsl.myDsl.PresentationLayer;
import org.xtext.example.mydsl.myDsl.PresentationSegments;
import org.xtext.example.mydsl.myDsl.ProfileManagement;
import org.xtext.example.mydsl.myDsl.ProfileManagementFunctions;
import org.xtext.example.mydsl.myDsl.Props;
import org.xtext.example.mydsl.myDsl.React;
import org.xtext.example.mydsl.myDsl.ReactActions;
import org.xtext.example.mydsl.myDsl.ReactActionsContent;
import org.xtext.example.mydsl.myDsl.ReactComponents;
import org.xtext.example.mydsl.myDsl.ReactConfiguration;
import org.xtext.example.mydsl.myDsl.ReactConfigurations;
import org.xtext.example.mydsl.myDsl.ReactConstructor;
import org.xtext.example.mydsl.myDsl.ReactCoreFunctions;
import org.xtext.example.mydsl.myDsl.ReactDependencies;
import org.xtext.example.mydsl.myDsl.ReactDependenciesRules;
import org.xtext.example.mydsl.myDsl.ReactDependenciesSubRules;
import org.xtext.example.mydsl.myDsl.ReactFunctions;
import org.xtext.example.mydsl.myDsl.ReactInfo;
import org.xtext.example.mydsl.myDsl.ReactInformation;
import org.xtext.example.mydsl.myDsl.ReactLibraries;
import org.xtext.example.mydsl.myDsl.ReactLibrary;
import org.xtext.example.mydsl.myDsl.ReactModules;
import org.xtext.example.mydsl.myDsl.ReactServicesRelation;
import org.xtext.example.mydsl.myDsl.ReactServicesType;
import org.xtext.example.mydsl.myDsl.ReactSubModules;
import org.xtext.example.mydsl.myDsl.SegmentStructure;
import org.xtext.example.mydsl.myDsl.SegmentStructureContent;
import org.xtext.example.mydsl.myDsl.SingleDependencies;
import org.xtext.example.mydsl.myDsl.SingleFile;
import org.xtext.example.mydsl.myDsl.Spring;
import org.xtext.example.mydsl.myDsl.State;
import org.xtext.example.mydsl.myDsl.Technologies;
import org.xtext.example.mydsl.myDsl.Technology;
import org.xtext.example.mydsl.myDsl.UIContent;
import org.xtext.example.mydsl.myDsl.UserDomain;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.ALBUM:
				sequence_Album(context, (Album) semanticObject); 
				return; 
			case MyDslPackage.ALBUM_MANAGEMENT:
				sequence_AlbumManagement(context, (AlbumManagement) semanticObject); 
				return; 
			case MyDslPackage.ALBUM_MANAGEMENT_FUNCTIONS:
				sequence_AlbumManagementFunctions(context, (AlbumManagementFunctions) semanticObject); 
				return; 
			case MyDslPackage.AMAZON_WEB_SERVICES:
				sequence_AmazonWebServices(context, (AmazonWebServices) semanticObject); 
				return; 
			case MyDslPackage.APP_ACCESS:
				sequence_AppAccess(context, (AppAccess) semanticObject); 
				return; 
			case MyDslPackage.APP_ACCESS_FUNCTIONS:
				sequence_AppAccessFunctions(context, (AppAccessFunctions) semanticObject); 
				return; 
			case MyDslPackage.ARCHITECTURE:
				sequence_Architecture(context, (Architecture) semanticObject); 
				return; 
			case MyDslPackage.ARCHITECTURE_COMPONENTS:
				sequence_ArchitectureComponents(context, (ArchitectureComponents) semanticObject); 
				return; 
			case MyDslPackage.BACK_END:
				sequence_BackEnd(context, (BackEnd) semanticObject); 
				return; 
			case MyDslPackage.BUSINESS_LOGIC_CONTENT:
				sequence_BusinessLogicContent(context, (BusinessLogicContent) semanticObject); 
				return; 
			case MyDslPackage.BUSINESS_LOGIC_LAYER:
				sequence_BusinessLogicLayer(context, (BusinessLogicLayer) semanticObject); 
				return; 
			case MyDslPackage.BUSINESS_LOGIC_SEGMENTS:
				sequence_BusinessLogicSegments(context, (BusinessLogicSegments) semanticObject); 
				return; 
			case MyDslPackage.COMPONENT_CLASS:
				sequence_ComponentClass(context, (ComponentClass) semanticObject); 
				return; 
			case MyDslPackage.COMPONENTS_LOGIC:
				sequence_ComponentsLogic(context, (ComponentsLogic) semanticObject); 
				return; 
			case MyDslPackage.COMPONENTS_UI:
				sequence_ComponentsUI(context, (ComponentsUI) semanticObject); 
				return; 
			case MyDslPackage.CORE_FUNCTIONS_DECLARATION:
				sequence_CoreFunctionsDeclaration(context, (CoreFunctionsDeclaration) semanticObject); 
				return; 
			case MyDslPackage.DOM_CONFIGURATIONS:
				sequence_DOMConfigurations(context, (DOMConfigurations) semanticObject); 
				return; 
			case MyDslPackage.DATA_PERSISTENCE_CONTENT:
				sequence_DataPersistenceContent(context, (DataPersistenceContent) semanticObject); 
				return; 
			case MyDslPackage.DATA_PERSISTENCE_LAYER:
				sequence_DataPersistenceLayer(context, (DataPersistenceLayer) semanticObject); 
				return; 
			case MyDslPackage.DATA_PERSISTENCE_SEGMENTS:
				sequence_DataPersistenceSegments(context, (DataPersistenceSegments) semanticObject); 
				return; 
			case MyDslPackage.DIRECTORIES:
				sequence_Directories(context, (Directories) semanticObject); 
				return; 
			case MyDslPackage.DIRECTORY_CONTENT:
				sequence_DirectoryContent(context, (DirectoryContent) semanticObject); 
				return; 
			case MyDslPackage.DOMAIN:
				sequence_Domain(context, (Domain) semanticObject); 
				return; 
			case MyDslPackage.DOMAIN_CONNECTION:
				sequence_DomainConnection(context, (DomainConnection) semanticObject); 
				return; 
			case MyDslPackage.DOMAIN_RELATIONS:
				sequence_DomainRelations(context, (DomainRelations) semanticObject); 
				return; 
			case MyDslPackage.ENTITIES:
				sequence_Entities(context, (Entities) semanticObject); 
				return; 
			case MyDslPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case MyDslPackage.FRONT_END:
				sequence_FrontEnd(context, (FrontEnd) semanticObject); 
				return; 
			case MyDslPackage.FUNCTIONALITIES:
				sequence_Functionalities(context, (Functionalities) semanticObject); 
				return; 
			case MyDslPackage.FUNCTIONALITY:
				sequence_Functionality(context, (Functionality) semanticObject); 
				return; 
			case MyDslPackage.LANDING_ACTIONS:
				sequence_LandingActions(context, (LandingActions) semanticObject); 
				return; 
			case MyDslPackage.LANDING_FUNCTIONS:
				sequence_LandingFunctions(context, (LandingFunctions) semanticObject); 
				return; 
			case MyDslPackage.LAYER:
				sequence_Layer(context, (Layer) semanticObject); 
				return; 
			case MyDslPackage.LAYER_RELATIONS:
				sequence_LayerRelations(context, (LayerRelations) semanticObject); 
				return; 
			case MyDslPackage.LAYER_SOURCE:
				sequence_LayerSource(context, (LayerSource) semanticObject); 
				return; 
			case MyDslPackage.LAYER_TARGET:
				sequence_LayerTarget(context, (LayerTarget) semanticObject); 
				return; 
			case MyDslPackage.LOGIC_CONTENT:
				sequence_LogicContent(context, (LogicContent) semanticObject); 
				return; 
			case MyDslPackage.LOGIC_STRUCTURE:
				sequence_LogicStructure(context, (LogicStructure) semanticObject); 
				return; 
			case MyDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MyDslPackage.MULTIPLE_FILE:
				sequence_MultipleFile(context, (MultipleFile) semanticObject); 
				return; 
			case MyDslPackage.NTIER_SOURCE:
				sequence_NTierSource(context, (NTierSource) semanticObject); 
				return; 
			case MyDslPackage.NTIER_TARGET:
				sequence_NTierTarget(context, (NTierTarget) semanticObject); 
				return; 
			case MyDslPackage.NTIERS:
				sequence_NTiers(context, (NTiers) semanticObject); 
				return; 
			case MyDslPackage.NTIERS_CONNECTIONS:
				sequence_NTiersConnections(context, (NTiersConnections) semanticObject); 
				return; 
			case MyDslPackage.NTIERS_RELATIONS:
				sequence_NTiersRelations(context, (NTiersRelations) semanticObject); 
				return; 
			case MyDslPackage.PACKAGE_NAME:
				sequence_PackageName(context, (PackageName) semanticObject); 
				return; 
			case MyDslPackage.PACKAGE_VERSION:
				sequence_PackageVersion(context, (PackageVersion) semanticObject); 
				return; 
			case MyDslPackage.PERSISTENCE_DATA_COMPONENT:
				sequence_PersistenceDataComponent(context, (PersistenceDataComponent) semanticObject); 
				return; 
			case MyDslPackage.PHOTO:
				sequence_Photo(context, (Photo) semanticObject); 
				return; 
			case MyDslPackage.PHOTO_ACTIONS:
				sequence_PhotoActions(context, (PhotoActions) semanticObject); 
				return; 
			case MyDslPackage.PHOTO_ACTIONS_FUNCTIONS:
				sequence_PhotoActionsFunctions(context, (PhotoActionsFunctions) semanticObject); 
				return; 
			case MyDslPackage.POSTGRE_SQL:
				sequence_PostgreSQL(context, (PostgreSQL) semanticObject); 
				return; 
			case MyDslPackage.PRESENTATION_CONTENT:
				sequence_PresentationContent(context, (PresentationContent) semanticObject); 
				return; 
			case MyDslPackage.PRESENTATION_LAYER:
				sequence_PresentationLayer(context, (PresentationLayer) semanticObject); 
				return; 
			case MyDslPackage.PRESENTATION_SEGMENTS:
				sequence_PresentationSegments(context, (PresentationSegments) semanticObject); 
				return; 
			case MyDslPackage.PROFILE_MANAGEMENT:
				sequence_ProfileManagement(context, (ProfileManagement) semanticObject); 
				return; 
			case MyDslPackage.PROFILE_MANAGEMENT_FUNCTIONS:
				sequence_ProfileManagementFunctions(context, (ProfileManagementFunctions) semanticObject); 
				return; 
			case MyDslPackage.PROPS:
				sequence_Props(context, (Props) semanticObject); 
				return; 
			case MyDslPackage.REACT:
				sequence_React(context, (React) semanticObject); 
				return; 
			case MyDslPackage.REACT_ACTIONS:
				sequence_ReactActions(context, (ReactActions) semanticObject); 
				return; 
			case MyDslPackage.REACT_ACTIONS_CONTENT:
				sequence_ReactActionsContent(context, (ReactActionsContent) semanticObject); 
				return; 
			case MyDslPackage.REACT_COMPONENTS:
				sequence_ReactComponents(context, (ReactComponents) semanticObject); 
				return; 
			case MyDslPackage.REACT_CONFIGURATION:
				sequence_ReactConfiguration(context, (ReactConfiguration) semanticObject); 
				return; 
			case MyDslPackage.REACT_CONFIGURATIONS:
				sequence_ReactConfigurations(context, (ReactConfigurations) semanticObject); 
				return; 
			case MyDslPackage.REACT_CONSTRUCTOR:
				sequence_ReactConstructor(context, (ReactConstructor) semanticObject); 
				return; 
			case MyDslPackage.REACT_CORE_FUNCTIONS:
				sequence_ReactCoreFunctions(context, (ReactCoreFunctions) semanticObject); 
				return; 
			case MyDslPackage.REACT_DEPENDENCIES:
				sequence_ReactDependencies(context, (ReactDependencies) semanticObject); 
				return; 
			case MyDslPackage.REACT_DEPENDENCIES_RULES:
				sequence_ReactDependenciesRules(context, (ReactDependenciesRules) semanticObject); 
				return; 
			case MyDslPackage.REACT_DEPENDENCIES_SUB_RULES:
				sequence_ReactDependenciesSubRules(context, (ReactDependenciesSubRules) semanticObject); 
				return; 
			case MyDslPackage.REACT_FUNCTIONS:
				sequence_ReactFunctions(context, (ReactFunctions) semanticObject); 
				return; 
			case MyDslPackage.REACT_INFO:
				sequence_ReactInfo(context, (ReactInfo) semanticObject); 
				return; 
			case MyDslPackage.REACT_INFORMATION:
				sequence_ReactInformation(context, (ReactInformation) semanticObject); 
				return; 
			case MyDslPackage.REACT_LIBRARIES:
				sequence_ReactLibraries(context, (ReactLibraries) semanticObject); 
				return; 
			case MyDslPackage.REACT_LIBRARY:
				sequence_ReactLibrary(context, (ReactLibrary) semanticObject); 
				return; 
			case MyDslPackage.REACT_MODULES:
				sequence_ReactModules(context, (ReactModules) semanticObject); 
				return; 
			case MyDslPackage.REACT_SERVICES_RELATION:
				sequence_ReactServicesRelation(context, (ReactServicesRelation) semanticObject); 
				return; 
			case MyDslPackage.REACT_SERVICES_TYPE:
				sequence_ReactServicesType(context, (ReactServicesType) semanticObject); 
				return; 
			case MyDslPackage.REACT_SUB_MODULES:
				sequence_ReactSubModules(context, (ReactSubModules) semanticObject); 
				return; 
			case MyDslPackage.SEGMENT_STRUCTURE:
				sequence_SegmentStructure(context, (SegmentStructure) semanticObject); 
				return; 
			case MyDslPackage.SEGMENT_STRUCTURE_CONTENT:
				sequence_SegmentStructureContent(context, (SegmentStructureContent) semanticObject); 
				return; 
			case MyDslPackage.SINGLE_DEPENDENCIES:
				sequence_SingleDependencies(context, (SingleDependencies) semanticObject); 
				return; 
			case MyDslPackage.SINGLE_FILE:
				sequence_SingleFile(context, (SingleFile) semanticObject); 
				return; 
			case MyDslPackage.SPRING:
				sequence_Spring(context, (Spring) semanticObject); 
				return; 
			case MyDslPackage.STATE:
				sequence_State(context, (State) semanticObject); 
				return; 
			case MyDslPackage.TECHNOLOGIES:
				sequence_Technologies(context, (Technologies) semanticObject); 
				return; 
			case MyDslPackage.TECHNOLOGY:
				sequence_Technology(context, (Technology) semanticObject); 
				return; 
			case MyDslPackage.UI_CONTENT:
				sequence_UIContent(context, (UIContent) semanticObject); 
				return; 
			case MyDslPackage.USER_DOMAIN:
				sequence_UserDomain(context, (UserDomain) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AlbumManagementFunctions returns AlbumManagementFunctions
	 *
	 * Constraint:
	 *     (name=ID name=ID)
	 */
	protected void sequence_AlbumManagementFunctions(ISerializationContext context, AlbumManagementFunctions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AlbumManagement returns AlbumManagement
	 *
	 * Constraint:
	 *     items+=AlbumManagementFunctions
	 */
	protected void sequence_AlbumManagement(ISerializationContext context, AlbumManagement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Album returns Album
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Album(ISerializationContext context, Album semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ALBUM__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ALBUM__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAlbumAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AmazonWebServices returns AmazonWebServices
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_AmazonWebServices(ISerializationContext context, AmazonWebServices semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.AMAZON_WEB_SERVICES__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.AMAZON_WEB_SERVICES__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAmazonWebServicesAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AppAccessFunctions returns AppAccessFunctions
	 *
	 * Constraint:
	 *     (name=ID name=ID)
	 */
	protected void sequence_AppAccessFunctions(ISerializationContext context, AppAccessFunctions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AppAccess returns AppAccess
	 *
	 * Constraint:
	 *     items+=AppAccessFunctions
	 */
	protected void sequence_AppAccess(ISerializationContext context, AppAccess semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ArchitectureComponents returns ArchitectureComponents
	 *
	 * Constraint:
	 *     (archcomponent+=FrontEnd archcomponent+=BackEnd archcomponent+=PersistenceDataComponent)
	 */
	protected void sequence_ArchitectureComponents(ISerializationContext context, ArchitectureComponents semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Architecture returns Architecture
	 *
	 * Constraint:
	 *     (elements+=NTiers+ elements+=NTiersConnections+)
	 */
	protected void sequence_Architecture(ISerializationContext context, Architecture semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BackEnd returns BackEnd
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_BackEnd(ISerializationContext context, BackEnd semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.BACK_END__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.BACK_END__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBackEndAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BusinessLogicContent returns BusinessLogicContent
	 *
	 * Constraint:
	 *     elements+=BusinessLogicSegments
	 */
	protected void sequence_BusinessLogicContent(ISerializationContext context, BusinessLogicContent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BusinessLogicLayer returns BusinessLogicLayer
	 *
	 * Constraint:
	 *     (elements+=BusinessLogicContent elements+=SegmentStructure)
	 */
	protected void sequence_BusinessLogicLayer(ISerializationContext context, BusinessLogicLayer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BusinessLogicSegments returns BusinessLogicSegments
	 *
	 * Constraint:
	 *     (name=ID name=ID name=ID name=ID)
	 */
	protected void sequence_BusinessLogicSegments(ISerializationContext context, BusinessLogicSegments semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ComponentClass returns ComponentClass
	 *
	 * Constraint:
	 *     (componentclass+=ReactFunctions componentclass+=Props)
	 */
	protected void sequence_ComponentClass(ISerializationContext context, ComponentClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ComponentsLogic returns ComponentsLogic
	 *
	 * Constraint:
	 *     (name=ID logiccomponents+=LogicContent)
	 */
	protected void sequence_ComponentsLogic(ISerializationContext context, ComponentsLogic semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ComponentsUI returns ComponentsUI
	 *
	 * Constraint:
	 *     (name=ID uicomponents+=UIContent)
	 */
	protected void sequence_ComponentsUI(ISerializationContext context, ComponentsUI semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CoreFunctionsDeclaration returns CoreFunctionsDeclaration
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_CoreFunctionsDeclaration(ISerializationContext context, CoreFunctionsDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CORE_FUNCTIONS_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CORE_FUNCTIONS_DECLARATION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCoreFunctionsDeclarationAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DOMConfigurations returns DOMConfigurations
	 *
	 * Constraint:
	 *     (elements+=DOMTypeConf name=ID)
	 */
	protected void sequence_DOMConfigurations(ISerializationContext context, DOMConfigurations semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataPersistenceContent returns DataPersistenceContent
	 *
	 * Constraint:
	 *     elements+=DataPersistenceSegments
	 */
	protected void sequence_DataPersistenceContent(ISerializationContext context, DataPersistenceContent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataPersistenceLayer returns DataPersistenceLayer
	 *
	 * Constraint:
	 *     elements+=DataPersistenceContent
	 */
	protected void sequence_DataPersistenceLayer(ISerializationContext context, DataPersistenceLayer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataPersistenceSegments returns DataPersistenceSegments
	 *
	 * Constraint:
	 *     (name=ID name=ID)
	 */
	protected void sequence_DataPersistenceSegments(ISerializationContext context, DataPersistenceSegments semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Directories returns Directories
	 *
	 * Constraint:
	 *     elements+=MultipleFile+
	 */
	protected void sequence_Directories(ISerializationContext context, Directories semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DirectoryContent returns DirectoryContent
	 *
	 * Constraint:
	 *     ((name=ID elements+=Directories)+ | elements+=SingleFile+)
	 */
	protected void sequence_DirectoryContent(ISerializationContext context, DirectoryContent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DomainConnection returns DomainConnection
	 *
	 * Constraint:
	 *     elements+=DomainRelations
	 */
	protected void sequence_DomainConnection(ISerializationContext context, DomainConnection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DomainRelations returns DomainRelations
	 *
	 * Constraint:
	 *     (
	 *         elements+=UserDomain 
	 *         name=ID 
	 *         elements+=Functionalities 
	 *         elements+=Album 
	 *         name=ID 
	 *         elements+=AlbumManagementFunctions 
	 *         elements+=Photo 
	 *         name=ID 
	 *         elements+=PhotoActionsFunctions 
	 *         elements+=PhotoActions 
	 *         name=ID 
	 *         elements+=AlbumManagement
	 *     )
	 */
	protected void sequence_DomainRelations(ISerializationContext context, DomainRelations semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Domain returns Domain
	 *
	 * Constraint:
	 *     (name=ID elements+=Entity elements+=Functionality elements+=DomainConnection)
	 */
	protected void sequence_Domain(ISerializationContext context, Domain semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entities returns Entities
	 *
	 * Constraint:
	 *     (elements+=Photo+ elements+=Album+ elements+=UserDomain+)
	 */
	protected void sequence_Entities(ISerializationContext context, Entities semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     elements+=Entities
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FrontEnd returns FrontEnd
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_FrontEnd(ISerializationContext context, FrontEnd semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FRONT_END__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FRONT_END__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFrontEndAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Functionalities returns Functionalities
	 *
	 * Constraint:
	 *     (functions+=ProfileManagement elements+=AppAccess items+=AlbumManagement resources+=PhotoActions aditionals+=LandingActions)
	 */
	protected void sequence_Functionalities(ISerializationContext context, Functionalities semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Functionality returns Functionality
	 *
	 * Constraint:
	 *     elements+=Functionalities
	 */
	protected void sequence_Functionality(ISerializationContext context, Functionality semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LandingActions returns LandingActions
	 *
	 * Constraint:
	 *     items+=LandingFunctions
	 */
	protected void sequence_LandingActions(ISerializationContext context, LandingActions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LandingFunctions returns LandingFunctions
	 *
	 * Constraint:
	 *     (name=ID name=ID)
	 */
	protected void sequence_LandingFunctions(ISerializationContext context, LandingFunctions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LayerRelations returns LayerRelations
	 *
	 * Constraint:
	 *     (layerelations+=RelationType name=ID layerorigin+=LayerSource layertarget+=LayerTarget)+
	 */
	protected void sequence_LayerRelations(ISerializationContext context, LayerRelations semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LayerSource returns LayerSource
	 *
	 * Constraint:
	 *     layerelations+=LayerRelationName
	 */
	protected void sequence_LayerSource(ISerializationContext context, LayerSource semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LayerTarget returns LayerTarget
	 *
	 * Constraint:
	 *     layerelations+=LayerRelationName
	 */
	protected void sequence_LayerTarget(ISerializationContext context, LayerTarget semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Layer returns Layer
	 *
	 * Constraint:
	 *     (elements+=PresentationLayer elements+=BusinessLogicLayer elements+=DataPersistenceLayer)
	 */
	protected void sequence_Layer(ISerializationContext context, Layer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LogicContent returns LogicContent
	 *
	 * Constraint:
	 *     (name=ID logiccomponents+=LogicStructure)
	 */
	protected void sequence_LogicContent(ISerializationContext context, LogicContent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LogicStructure returns LogicStructure
	 *
	 * Constraint:
	 *     (name=ID logiccomponents+=ComponentClass name=ID)
	 */
	protected void sequence_LogicStructure(ISerializationContext context, LogicStructure semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (elements+=Domain elements+=Architecture elements+=Technology)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MultipleFile returns MultipleFile
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_MultipleFile(ISerializationContext context, MultipleFile semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.MULTIPLE_FILE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.MULTIPLE_FILE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultipleFileAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NTierSource returns NTierSource
	 *
	 * Constraint:
	 *     ntierconnection+=NTiersRelations
	 */
	protected void sequence_NTierSource(ISerializationContext context, NTierSource semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NTierTarget returns NTierTarget
	 *
	 * Constraint:
	 *     ntierconnection+=NTiersRelations
	 */
	protected void sequence_NTierTarget(ISerializationContext context, NTierTarget semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NTiersConnections returns NTiersConnections
	 *
	 * Constraint:
	 *     (ntierconnection+=ConnectionType name=ID ntierorigin+=NTierSource ntiertarget+=NTierTarget)+
	 */
	protected void sequence_NTiersConnections(ISerializationContext context, NTiersConnections semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NTiersRelations returns NTiersRelations
	 *
	 * Constraint:
	 *     (name=ID | name=ID | name=ID | name=ID)
	 */
	protected void sequence_NTiersRelations(ISerializationContext context, NTiersRelations semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NTiers returns NTiers
	 *
	 * Constraint:
	 *     (elements+=Layer+ elements+=LayerRelations+ elements+=ArchitectureComponents+)
	 */
	protected void sequence_NTiers(ISerializationContext context, NTiers semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PackageName returns PackageName
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_PackageName(ISerializationContext context, PackageName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PACKAGE_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PACKAGE_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPackageNameAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PackageVersion returns PackageVersion
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_PackageVersion(ISerializationContext context, PackageVersion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PACKAGE_VERSION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PACKAGE_VERSION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPackageVersionAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PersistenceDataComponent returns PersistenceDataComponent
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_PersistenceDataComponent(ISerializationContext context, PersistenceDataComponent semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PERSISTENCE_DATA_COMPONENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PERSISTENCE_DATA_COMPONENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPersistenceDataComponentAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PhotoActionsFunctions returns PhotoActionsFunctions
	 *
	 * Constraint:
	 *     (name=ID name=ID name=ID)
	 */
	protected void sequence_PhotoActionsFunctions(ISerializationContext context, PhotoActionsFunctions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PhotoActions returns PhotoActions
	 *
	 * Constraint:
	 *     items+=PhotoActionsFunctions
	 */
	protected void sequence_PhotoActions(ISerializationContext context, PhotoActions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Photo returns Photo
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Photo(ISerializationContext context, Photo semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PHOTO__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PHOTO__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPhotoAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PostgreSQL returns PostgreSQL
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_PostgreSQL(ISerializationContext context, PostgreSQL semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.POSTGRE_SQL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.POSTGRE_SQL__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPostgreSQLAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PresentationContent returns PresentationContent
	 *
	 * Constraint:
	 *     elements+=PresentationSegments
	 */
	protected void sequence_PresentationContent(ISerializationContext context, PresentationContent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PresentationLayer returns PresentationLayer
	 *
	 * Constraint:
	 *     (elements+=PresentationContent elements+=SegmentStructure)
	 */
	protected void sequence_PresentationLayer(ISerializationContext context, PresentationLayer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PresentationSegments returns PresentationSegments
	 *
	 * Constraint:
	 *     (name=ID name=ID name=ID)
	 */
	protected void sequence_PresentationSegments(ISerializationContext context, PresentationSegments semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ProfileManagementFunctions returns ProfileManagementFunctions
	 *
	 * Constraint:
	 *     (name=ID name=ID)
	 */
	protected void sequence_ProfileManagementFunctions(ISerializationContext context, ProfileManagementFunctions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ProfileManagement returns ProfileManagement
	 *
	 * Constraint:
	 *     items+=ProfileManagementFunctions
	 */
	protected void sequence_ProfileManagement(ISerializationContext context, ProfileManagement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Props returns Props
	 *
	 * Constraint:
	 *     (name=ID componentclass+=DataType)+
	 */
	protected void sequence_Props(ISerializationContext context, Props semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReactActionsContent returns ReactActionsContent
	 *
	 * Constraint:
	 *     reactrelcontent+=ReactServicesRelation+
	 */
	protected void sequence_ReactActionsContent(ISerializationContext context, ReactActionsContent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReactActions returns ReactActions
	 *
	 * Constraint:
	 *     reactactcontent+=ReactActionsContent
	 */
	protected void sequence_ReactActions(ISerializationContext context, ReactActions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReactComponents returns ReactComponents
	 *
	 * Constraint:
	 *     (componentslogic+=ComponentsLogic componentsui+=ComponentsUI)
	 */
	protected void sequence_ReactComponents(ISerializationContext context, ReactComponents semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReactConfiguration returns ReactConfiguration
	 *
	 * Constraint:
	 *     (dependencies+=ReactDependencies configurations+=ReactConfigurations)
	 */
	protected void sequence_ReactConfiguration(ISerializationContext context, ReactConfiguration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReactConfigurations returns ReactConfigurations
	 *
	 * Constraint:
	 *     (name=ID configurations+=DOMConfigurations+)
	 */
	protected void sequence_ReactConfigurations(ISerializationContext context, ReactConfigurations semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReactConstructor returns ReactConstructor
	 *
	 * Constraint:
	 *     (componentclass+=State componentclass+=CoreFunctionsDeclaration*)
	 */
	protected void sequence_ReactConstructor(ISerializationContext context, ReactConstructor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReactCoreFunctions returns ReactCoreFunctions
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ReactCoreFunctions(ISerializationContext context, ReactCoreFunctions semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.REACT_CORE_FUNCTIONS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.REACT_CORE_FUNCTIONS__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReactCoreFunctionsAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ReactDependenciesRules returns ReactDependenciesRules
	 *
	 * Constraint:
	 *     (name=ID dependencies+=ReactDependenciesSubRules+)
	 */
	protected void sequence_ReactDependenciesRules(ISerializationContext context, ReactDependenciesRules semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReactDependenciesSubRules returns ReactDependenciesSubRules
	 *
	 * Constraint:
	 *     dependencies+=SingleDependencies
	 */
	protected void sequence_ReactDependenciesSubRules(ISerializationContext context, ReactDependenciesSubRules semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReactDependencies returns ReactDependencies
	 *
	 * Constraint:
	 *     dependencies+=ReactDependenciesRules+
	 */
	protected void sequence_ReactDependencies(ISerializationContext context, ReactDependencies semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReactFunctions returns ReactFunctions
	 *
	 * Constraint:
	 *     (componentclass+=ReactConstructor lifecycleclass+=ReactLifeCycle* componentclass+=ReactCoreFunctions* renderclass+=ReactRender)
	 */
	protected void sequence_ReactFunctions(ISerializationContext context, ReactFunctions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReactInfo returns ReactInfo
	 *
	 * Constraint:
	 *     reactinformation+=ReactInformation+
	 */
	protected void sequence_ReactInfo(ISerializationContext context, ReactInfo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReactInformation returns ReactInformation
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ReactInformation(ISerializationContext context, ReactInformation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.REACT_INFORMATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.REACT_INFORMATION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReactInformationAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ReactLibraries returns ReactLibraries
	 *
	 * Constraint:
	 *     reactlibraries+=ReactLibrary+
	 */
	protected void sequence_ReactLibraries(ISerializationContext context, ReactLibraries semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReactLibrary returns ReactLibrary
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ReactLibrary(ISerializationContext context, ReactLibrary semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.REACT_LIBRARY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.REACT_LIBRARY__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReactLibraryAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ReactModules returns ReactModules
	 *
	 * Constraint:
	 *     reactmodules+=ReactSubModules
	 */
	protected void sequence_ReactModules(ISerializationContext context, ReactModules semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReactServicesRelation returns ReactServicesRelation
	 *
	 * Constraint:
	 *     (reactrelationcontent+=ReactServicesType name=ID)+
	 */
	protected void sequence_ReactServicesRelation(ISerializationContext context, ReactServicesRelation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReactServicesType returns ReactServicesType
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ReactServicesType(ISerializationContext context, ReactServicesType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.REACT_SERVICES_TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.REACT_SERVICES_TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReactServicesTypeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ReactSubModules returns ReactSubModules
	 *
	 * Constraint:
	 *     (reactmodules+=ReactConfiguration reactmodules+=ReactComponents reactmodules+=ReactActions reactmodules+=ReactLibraries reactmodules+=ReactInfo)
	 */
	protected void sequence_ReactSubModules(ISerializationContext context, ReactSubModules semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     React returns React
	 *
	 * Constraint:
	 *     (name=ID reacts+=ReactModules)
	 */
	protected void sequence_React(ISerializationContext context, React semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SegmentStructureContent returns SegmentStructureContent
	 *
	 * Constraint:
	 *     (name=ID elements+=DirectoryContent+)
	 */
	protected void sequence_SegmentStructureContent(ISerializationContext context, SegmentStructureContent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SegmentStructure returns SegmentStructure
	 *
	 * Constraint:
	 *     elements+=SegmentStructureContent
	 */
	protected void sequence_SegmentStructure(ISerializationContext context, SegmentStructure semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SingleDependencies returns SingleDependencies
	 *
	 * Constraint:
	 *     (dependencies+=PackageName dependencies+=PackageVersion)
	 */
	protected void sequence_SingleDependencies(ISerializationContext context, SingleDependencies semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SingleFile returns SingleFile
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_SingleFile(ISerializationContext context, SingleFile semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SINGLE_FILE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SINGLE_FILE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSingleFileAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Spring returns Spring
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Spring(ISerializationContext context, Spring semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SPRING__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SPRING__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSpringAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     State returns State
	 *
	 * Constraint:
	 *     (name=ID componentclass+=DataType)+
	 */
	protected void sequence_State(ISerializationContext context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Technologies returns Technologies
	 *
	 * Constraint:
	 *     (factors+=Spring factors+=React factors+=PostgreSQL factors+=AmazonWebServices)
	 */
	protected void sequence_Technologies(ISerializationContext context, Technologies semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Technology returns Technology
	 *
	 * Constraint:
	 *     (name=ID elements+=Technologies)
	 */
	protected void sequence_Technology(ISerializationContext context, Technology semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UIContent returns UIContent
	 *
	 * Constraint:
	 *     ((name=ID uicontent+=ComponentClass)+ (name=ID uicontent+=ComponentClass)+)
	 */
	protected void sequence_UIContent(ISerializationContext context, UIContent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UserDomain returns UserDomain
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_UserDomain(ISerializationContext context, UserDomain semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.USER_DOMAIN__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.USER_DOMAIN__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUserDomainAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
