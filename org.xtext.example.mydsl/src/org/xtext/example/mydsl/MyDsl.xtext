grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

generate myDsl "http://www.xtext.org/example/mydsl/MyDsl"

//System
Model:
'System' ':' '{' elements+=Domain elements+=Architecture elements+=Technology '}';

// Domain
Domain:
'Domain' name=ID ':' '{' elements+=Entity elements+=Functionality elements+=DomainConnection '}';

// Domain - Entities
Entity:
'Entities' ':' '{' (elements+=Entities) '}';

Entities:
(elements+=Photo)+ (elements+=Album)+ (elements+=UserDomain)+;

Photo:
'Photo' name=ID;

Album:
'Album' name=ID;

UserDomain:
'UserDomain' name=ID;

// Domain - Functionalities
Functionality:
'Functionalities' ':' '{' (elements+=Functionalities) '}';

Functionalities:
functions+=ProfileManagement 
elements+=AppAccess
items+=AlbumManagement
resources+=PhotoActions
aditionals+=LandingActions;

ProfileManagement:
'ProfileManagement' ':' items+=ProfileManagementFunctions;

ProfileManagementFunctions:
'ViewProfilePhoto' name=ID 'EditProfileInfo' name=ID;

AppAccess:
'AppAccess' ':' items+=AppAccessFunctions;

AppAccessFunctions:
'Login' name=ID 'Register' name=ID;

AlbumManagement:
'AlbumManagement' ':'items+=AlbumManagementFunctions;

AlbumManagementFunctions:
'CreateAlbum' name=ID 'SelectAlbum' name=ID;

PhotoActions:
'PhotoActions' ':'items+=PhotoActionsFunctions;

PhotoActionsFunctions:
'ViewAllPhotos' name=ID 'ViewExtendedPhoto' name=ID 'LoadPhoto' name=ID;

LandingActions:
'LandingActions' ':'items+=LandingFunctions;

LandingFunctions:
'ViewCarousel' name=ID 'PassPhoto' name=ID;


//Domain - Relations
DomainConnection:
'DomainRelations' ':' '{' elements+=DomainRelations '}';

DomainRelations:
elements+=UserDomain name=ID ':' '{' elements+=Functionalities '}'
elements+=Album name=ID ':' '{' elements+=AlbumManagementFunctions '}'
elements+=Photo name=ID ':' '{' elements+=PhotoActionsFunctions '}'
elements+=PhotoActions name=ID  ':' '{'elements+=AlbumManagement '}';
		
//Architecture
Architecture:
'Architecture:' '{' (elements+=NTiers)+  (elements+=NTiersConnections)+ '}';

NTiers:
'Layers' (elements+=Layer)+ 'LayersRelations' (elements+=LayerRelations)+ 'ArchitectureComponents' (elements+=ArchitectureComponents)+;

Layer:
elements+=PresentationLayer elements+=BusinessLogicLayer elements+=DataPersistenceLayer;

PresentationLayer:
'PresentationLayer' elements+=PresentationContent elements+=SegmentStructure;

PresentationContent:
'PresentationSegments' elements+=PresentationSegments;

PresentationSegments:
'PresentationView' name=ID 'PresentationComponent' name=ID 'PresentationAction' name=ID;

BusinessLogicLayer:
'BusinessLogicLayer' elements+=BusinessLogicContent elements+=SegmentStructure;

BusinessLogicContent:
'BusinessLogicSegments' elements+=BusinessLogicSegments;

BusinessLogicSegments:
'ControllerSegment' name=ID 'ModelSegment' name=ID 'RepositorySegment' name=ID 'SecuritySegment' name=ID;

DataPersistenceLayer:
'DataPersistenceLayer' elements+=DataPersistenceContent;

DataPersistenceContent:
'DataPersistenceSegments' elements+=DataPersistenceSegments;

DataPersistenceSegments:
'PostgreSLQSegment' name=ID 'AmazonS3Storage' name=ID;

SegmentStructure:
'SegmentStructure' elements+=SegmentStructureContent;

SegmentStructureContent:
'Directories'	name=ID (elements+=DirectoryContent)+;

DirectoryContent:
('Directory' name=ID elements+=Directories)+ | (elements+=SingleFile)+;

Directories:
(elements+=MultipleFile)+;

SingleFile:
'SingleFile' name=ID;

MultipleFile:
'CommonFile' name=ID;

LayerRelations:
(layerelations+=RelationType name=ID layerorigin+=LayerSource layertarget+=LayerTarget)+;

RelationType:
'AllowedToUse' | 'AllowToUseBelow';

LayerSource:
'source' layerelations+=LayerRelationName;

LayerTarget:
'target' layerelations+=LayerRelationName;

LayerRelationName:
'PresentationLayer' | 'BusinessLogicLayer' | 'PersistenceDataLayer';

ArchitectureComponents:
'SystemComponents' archcomponent+=FrontEnd archcomponent+=BackEnd archcomponent+=PersistenceDataComponent;

FrontEnd:
'FrontEndComponent' name=ID;

BackEnd: 
'BackEndComponent' name=ID;

PersistenceDataComponent:
'PersistenceDataComponent' name=ID;

NTiersConnections:
'Connectors' (ntierconnection+=ConnectionType name=ID ntierorigin+=NTierSource ntiertarget+=NTierTarget)+;

ConnectionType:
'REST' | 'PostgreSQLConnection' | 'AmazonS3API';

NTierSource:
'source' ntierconnection+=NTiersRelations;

NTierTarget:
'target' ntierconnection+=NTiersRelations;

NTiersRelations:
'FrontEndComponent' name=ID | 'BackEndComponent' name=ID | 'PersistenceDataComponent' name=ID | 'AmazonService' name=ID;

//Technology
Technology:
'Technology' name=ID ':' '{' elements+=Technologies '}';

Technologies:
factors+=Spring factors+=React factors+=PostgreSQL factors+=AmazonWebServices;


Spring:
'Spring' name=ID ':' '{' elements+=SpringBootApplication '}';

SpringBootApplication:
'SpringBootApplication'  elements+=Configuration (elements+=SpringComponent)+ (elements+=SpringRepository)+  (elements+=RestController)+ (elements+=SpringEntity)+  ;

Configuration:
'Configuration' ':' '{' elements+=EnableGlobalMethodSecurity  elements+=EnableAuthorizationServer   elements+=EnableResourceServer  elements+=EnableWebSecurity '}';

EnableGlobalMethodSecurity:
'EnableGlobalMethodSecurity' name=ID;

EnableAuthorizationServer :
'EnableAuthorizationServer' name=ID;

EnableResourceServer :
'EnableResourceServer' name=ID;

EnableWebSecurity:
'EnableWebSecurity' name=ID;

SpringComponent:
'SpringComponent' ':' '{' elements+=OrderSpring '}';

OrderSpring:
'OrderSpring' name=ID;

SpringRepository:
'SpringRepositories' ':' '{' (elements+=SpringRepositories)+ '}';

SpringRepositories:
'SpringRepository' name=ID;

RestController:
'RestController' name=ID ':' '{' elements+=Specification  (elements+=Autowired)+  (elements+=RequestMapping)+ elements+=ExceptionHandler '}';

Specification:
'Specification' (elements+=Predicate)+ elements+=SearchCriteria;

Predicate:
'Predicate' name=ID;

SearchCriteria:
'SearchCriteria' name=ID;

Autowired: 
'Autowired'elements+=AutowiredType;

AutowiredType:
'AutowiredType' name=ID;

RequestMapping:
'RequestMapping' (elements+=RequestPart)* elements+=RequestMappingType;

RequestPart:
'RequestPart' name=ID;

RequestMappingType:
'RequestMappingType' name=ID RequestMappingTypeConf;

RequestMappingTypeConf:
'PostMapping' | 'GetMapping' | 'PutMapping' | 'DeleteMapping';

ExceptionHandler:
'ExceptionHandler' name=ID (elements+=ExceptionProcess)+;

ExceptionProcess:
'ExceptionProcess' name=ID;

SpringEntity:
'SpringEntity' name=ID ':' '{' (elements+=SpringTable)+ (elements+=NameNativeQuery)* '}';

SpringTable:
'SpringTable' name=ID elements+=SpringTableId (elements+=Columns)+;

SpringTableId:
'SpringTableId' (elements+=GeneratedValue)*;

GeneratedValue:
'GeneratedValue' name=ID;

Columns:
'Column' name=ID;

NameNativeQuery:
'NameNativeQuery'  name=ID;


React:
'React' name=ID ':' '{' reacts+=ReactModules '}';

ReactModules:
'ReactModules' ':' '{' reactmodules+=ReactSubModules '}';

ReactSubModules:
reactmodules+=ReactConfiguration
reactmodules+=ReactComponents
reactmodules+=ReactActions
reactmodules+=ReactLibraries
reactmodules+=ReactInfo
;

ReactConfiguration:
'ReactConfiguration' ':' '{' dependencies+=ReactDependencies configurations+=ReactConfigurations '}';

ReactDependencies:
'DependenciesStruct' (dependencies+=ReactDependenciesRules)+;

ReactDependenciesRules:
'DependencyType' name=ID (dependencies+=ReactDependenciesSubRules)+;

ReactDependenciesSubRules:
(dependencies+=SingleDependencies);

SingleDependencies:
(dependencies+=PackageName) (dependencies+=PackageVersion);

PackageName:
'PackageName' name=ID;

PackageVersion:
'PackageVersion' name=ID;	

ReactConfigurations:
'ReactDOMConfigurations' name=ID (configurations+=DOMConfigurations)+;

DOMConfigurations:
(elements+=DOMTypeConf) name=ID;

DOMTypeConf:
'RoutingConf' | 'ServiceWorker' | 'HTMLStructure' | 'Manifest' | 'RepositoriesConf';

ReactComponents:
'ReactComponents' ':' '{' componentslogic+=ComponentsLogic componentsui+=ComponentsUI '}';

ComponentsLogic:
'LogicComponents' name=ID logiccomponents+=LogicContent;

LogicContent:
'RoutingComponents' name=ID logiccomponents+=LogicStructure;

LogicStructure:
'AppComponent' name=ID logiccomponents+=ComponentClass 'IndexComponent' name=ID;

ComponentsUI:
'UIComponents' name=ID uicomponents+=UIContent;

UIContent: 
('ViewComponent' name=ID uicontent+=ComponentClass)+
('Subcomponents' name=ID uicontent+=ComponentClass)+;

ComponentClass:
componentclass+=ReactFunctions componentclass+=Props;

ReactFunctions:
componentclass+=ReactConstructor (lifecycleclass+=ReactLifeCycle)* (componentclass+=ReactCoreFunctions)* renderclass+=ReactRender;

ReactConstructor:
'Constructor' componentclass+=State (componentclass+=CoreFunctionsDeclaration)*;

State:
'State' (name=ID componentclass+=DataType)*;

DataType:
'String' | 'Array' | 'Object' | 'Number' | 'null' | 'Boolean';

CoreFunctionsDeclaration:
name=ID 'FunctionBindingDeclaration';

ReactLifeCycle:
'ComponentDidMount' 'FunctionStructure' |
'ComponentDidUpdate' 'FunctionStructure' |
'ComponentWillUnmount' 'FunctionStructure';

ReactRender:
'Render' 'RenderContent';

Props:
'Props' (name=ID componentclass+=DataType)*;

ReactCoreFunctions:
name=ID 'FunctionStructure';

ReactActions:
'ReactActions' ':' '{' reactactcontent+=ReactActionsContent '}';

ReactActionsContent:
(reactrelcontent+=ReactServicesRelation)+ ;
	
ReactServicesType:
'ServiceType' name=ID 'ServiceContent';

ReactServicesRelation:
'ServicesRelations' (reactrelationcontent+=ReactServicesType name=ID ReactRequest)+;

ReactRequest: 
'Wrapper' | 'AuxWrapper';

ReactLibraries:
'ReactLibraries' ':' '{' (reactlibraries+=ReactLibrary)+ '}';

ReactLibrary:
ReactLibraryType name=ID 'LibraryContent';

ReactLibraryType:
'ReactDesign' | 'ReactRouting' | 'ComponentManagement' |
'StoreManagement' | 'ReactDeployment' | 'ConfigurationLibrary';

ReactInfo:
'ReactInformation' ':' '{' (reactinformation+=ReactInformation)+ '}';

ReactInformation:
ReactInformationType name=ID 'InformationContent';

ReactInformationType:
'ReactReadme' | 'ReactAditionalInfo';



PostgreSQL:
'PostgreSQL' name=ID ':' '{' elements+=Cluster '}';

Cluster:
'Database' elements+=Database (elements+=PostgresUser)+;

Database:
'Schema' name=ID elements+=Schema;

Schema: 
	(elements+=Index_p)* (elements+=ViewSchema)* (elements+=Table_p)+ (elements+=Trigger)* elements+=Function;
	
Index_p:
	'Index_p' name=ID;
	
ViewSchema:
	'ViewSchema' name=ID;
	
Table_p:
	'Table_p' name=ID ':' '{' (elements+=ForeignKey)+ (elements+=Column)+ (elements+=Row)+ '}';
		
ForeignKey: 
	'ForeignKey' elements+=ForeignKey_n elements+=ForeignKeyRef;
	
ForeignKey_n: 
	'ForeingKeyName' name=ID;
	
ForeignKeyRef:
	'ForeignKeyRef' (elements+=RefTable_p)*;
	
RefTable_p:
	'RefTable_p' name=ID;

Column: 
	'Column' name=ID elements+=DatatypeDB (elements+=Constraint)*;
	
DatatypeDB:
	'DatatypeDB' name=ID;
	
Constraint:
	'Constraint' name=ID;
	
Row :
	'Row' name=ID (elements+=Policy)*;

Policy:
	'Policy' name=ID;
	
Trigger: 
	'Trigger' name=ID;
	
Function:
	'Function' name=ID;
	

PostgresUser:
	'PostgresUser' name=ID ':' '{' elements+=Privilege (elements+=Query)* '}';
	
Privilege:
	'Privilege' name=ID;
	
Query: 
	'Query' elements+=Clause;
	
Clause: 
	'Clause' name=ID;
	



AmazonWebServices: 
'AmazonWebServices'	name=ID ':' '{' elements+=AmazonSimpleStorageService elements+=AmazonElasticComputeCloud '}';
	
AmazonSimpleStorageService:
'AmazonSimpleStorageService' ':' '{' (elements+=BatchOperation)* elements+=Bucket '}';
	
BatchOperation:
	'BatchOperation' name=ID;
	
Bucket:
	'Bucket' name=ID elements+=BucketAccess  (elements+=AmazonFolder)*  (elements+=AmazonFile)+;

BucketAccess:
	'BucketAccess'	elements+=PublicAccess | elements+=ObjectsPublic | elements+=BucketObjectsNotPublic | elements+=OnlyAuthorized;

PublicAccess:
	'PublicAccess' name=ID;

ObjectsPublic:
	'ObjectsPublic' name=ID;
	
BucketObjectsNotPublic:
	'BucketObjectsNotPublic' name=ID;
	
OnlyAuthorized: 
	'OnlyAuthorized' name=ID;
	
AmazonFolder:
	'AmazonFolder' name=ID;
	
AmazonFile:
 'AmazonFile' (elements+=Metadata)+;
	
Metadata:
	'Metadata' name=ID;
	
AmazonElasticComputeCloud:
	'AmazonElasticComputeCloud' name=ID;