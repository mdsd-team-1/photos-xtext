Spring:
'Spring' elements+=SpringBootApplication;

SpringBootApplication:
'SpringBootApplication' (elements+=Configuration) (elements+=SpringComponent) (elements+=SpringRepository)  (elements+=RestController) (elements+=SpringEntity);

Configuration:
'Configuration' elements+=EnableGlobalMethodSecurity  elements+=EnableAuthorizationServer   elements+=EnableResourceServer  elements+=EnableWebSecurity;

EnableGlobalMethodSecurity:
'EnableGlobalMethodSecurity' name=ID;

EnableAuthorizationServer :
'EnableAuthorizationServer' name=ID;

EnableResourceServer :
'EnableResourceServer' name=ID;

EnableWebSecurity:
'EnableWebSecurity' name=ID;

SpringComponent:
'SpringComponent' elements+=OrderSpring;

OrderSpring:
'OrderSpring' name=ID;

SpringRepository:
'SpringRepositories' (elements+=SpringRepositories);

SpringRepositories:
'SpringRepository' name=ID;

RestController:
'RestController' elements+=Specification  elements+=Autowired  elements+=RequestMapping elements+=ExceptionHandler;

Specification:
'Specification' (elements+=Predicate) elements+=SearchCriteria;

Predicate:
'Predicate' name=ID;

SearchCriteria:
'SearchCriteria' name=ID;

Autowired: 
(elements+=AutowiredType);

AutowiredType:
'AutowiredType' name=ID;

RequestMapping:
'RequestMapping' (elements+=RequestPart) (elements+=RequestMappingType);

RequestPart:
'ExceptionRequest' name=ID;

RequestMappingType:
'RequestMappingType' (elements+=PostMapping) (elements+=GetMapping) (elements+=PutMapping) (elements+=DeleteMapping);

PostMapping:
'PostMapping' name=ID;

GetMapping:
'GetMapping' name=ID;

PutMapping:
'PutMapping' name=ID;

DeleteMapping:
'DeleteMapping' name=ID;

ExceptionHandler:
(elements+=ExceptionProcess);

ExceptionProcess:
'ExceptionProcess' name=ID;

SpringEntity:
'SpringEntity' (elements+=SpringTable) (elements+=NameNativeQuery);

SpringTable:
'SpringTable' elements+=SpringTableId (elements+=Columns);

SpringTableId:
'SpringTableId' elements+=GeneratedValue | elements+=null;

GeneratedValue:
'GeneratedValue' name=ID;

null:
'null' name=ID;	

Columns:
'Columns' name=ID;

NameNativeQuery:
'NameNativeQuery'  name=ID;



PostgreSQL:
'Cluster' elements+=Cluster;

Cluster:
'Database' elements+=Database (elements+=PostgresUser);

Database:
'Schema'  elements+=Schema;

Schema: 
	elements+=Index_p elements+=ViewSchema (elements+=Table_p) elements+=Trigger elements+=Function;
	
Index_p:
	'Index_p' name=ID;
	
ViewSchema:
	'ViewSchema' name=ID;
	
Table_p:
	(elements+=ForeignKey) (elements+=Column) (elements+=Row);
		
ForeignKey: 
	elements+=ForeignKey_n elements+=ForeignKeyRef;
	
ForeignKey_n: 
	'ForeingKey' name=ID;
	
ForeignKeyRef:
	'ForeignKeyRef' elements+=RefTable_p | elements+=null;
	
RefTable_p:
	'RefTable_p' name=ID;

Column: 
	elements+=Datatype elements+=Constraint;
	
Datatype:
	'Datatype' name=ID;
	
Constraint:
	'Constraint' name=ID;
	
Row :
	elements+=Policy;

Policy:
	'Policy' name=ID;
	
Trigger: 
	'Trigger' name=ID;
	
Function:
	'Function' name=ID;
	

PostgresUser:
	elements+=Privilege elements+=Query;
	
Privilege:
	'Privilege' name=ID;
	
Query: 
	elements+=Clause;
	
Clause: 
	'Clause' name=ID;
	



AmazonWebServices: 
	elements+=AmazonSimpleStorageService elements+=AmazonElasticComputeCloud;
	
AmazonSimpleStorageService:
	elements+=BatchOperation elements+=Bucket;
	
BatchOperation:
	'BatchOperation' name=ID;
	
Bucket:
	elements+=BucketAccess  elements+=AmazonFolder  (elements+=AmazonFile);

BucketAccess:
	elements+=PublicAccess | elements+=ObjectsPublic | elements+=BucketObjectsNotPublic | elements+=OnlyAuthorized;

PublicAccess:
	'PublicAccess' name=ID;

ObjectsPublic:
	'ObjectsPublic' name=ID;
	
BucketObjectsNotPublic:
	'BucketObjectsNotPublic' name=ID;
	
OnlyAuthorized: 
	'OnlyAuthorized' name=ID;
	
AmazonFolder:
	'AmazonFolder' name=ID;
	
AmazonFile:
	elements+=Metadata;
	
Metadata:
	'Metadata' name=ID;
	
AmazonElasticComputeCloud:
	'AmazonElasticComputeCloud' name=ID;